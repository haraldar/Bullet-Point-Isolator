/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BulletPointIsolator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var ISOLATION_FILE = "isolation.md";
var BulletPointIsolator = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "BulletPointIsolator Plugin", (evt) => {
      new import_obsidian.Notice("This is a notice i guess!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new BulletPointIsolatorModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "BulletPointIsolator editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("BulletPointIsolator Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new BulletPointIsolatorModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new BulletPointIsolatorSettingTab(this.app, this));
    this.registerDomEvent(document, "click", async (evt) => {
      await this.isolateBulletPoint(evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  async isolateBulletPoint(evt) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    if (evt.altKey && evt.ctrlKey && this.getBulletPointNr(evt.target.parentNode)) {
      console.log("Bullet Point Isolator activated with Ctrl+Alt+Click.");
      this.showNotice("Bullet Point Isolator activated with Ctrl+Alt+Click.");
      const fileOrigin = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file;
      const currentFocusLine = (_c = (_b = this.app.workspace.activeEditor) == null ? void 0 : _b.editor) == null ? void 0 : _c.getCursor().line;
      if ((fileOrigin == null ? void 0 : fileOrigin.path) === null || (fileOrigin == null ? void 0 : fileOrigin.path) === void 0) {
        this.showNotice("file origin is either null or undefined", true);
        return;
      } else if ((fileOrigin == null ? void 0 : fileOrigin.path) === ISOLATION_FILE) {
        const bulletPointNr = this.getBulletPointNr(evt.target.parentNode);
        if (bulletPointNr === null) {
          this.showNotice("line in focus doesn't have bullet point", true);
          return;
        } else if (bulletPointNr !== 1) {
          this.showNotice("line in focus isn't root bullet point", true);
          return;
        }
        await this.app.fileManager.processFrontMatter(fileOrigin, async (fm) => {
          var _a2, _b2, _c2, _d2, _e2;
          const fmLength = Object.keys(fm).length + 2;
          const isolationFileLineCount = (_b2 = (_a2 = this.app.workspace.activeEditor) == null ? void 0 : _a2.editor) == null ? void 0 : _b2.lineCount();
          let linesToWrite = [];
          for (let lineNr = fmLength; lineNr < isolationFileLineCount; lineNr++) {
            linesToWrite.push((_d2 = (_c2 = this.app.workspace.activeEditor) == null ? void 0 : _c2.editor) == null ? void 0 : _d2.getLine(lineNr));
          }
          const linesToWriteCount = linesToWrite.length;
          const originFileAbstract = this.app.vault.getAbstractFileByPath(fm.origin);
          await this.app.workspace.getLeaf().openFile(originFileAbstract);
          const currentEditor = (_e2 = this.app.workspace.activeEditor) == null ? void 0 : _e2.editor;
          for (let lineNr = fm.startLine; lineNr < fm.endLine; lineNr++) {
            currentEditor == null ? void 0 : currentEditor.setLine(lineNr, "");
          }
          if (linesToWriteCount > fm.endLine - fm.startLine + 1) {
            const spacers = "\n".repeat(linesToWriteCount - (fm.endLine - fm.startLine + 1));
            currentEditor == null ? void 0 : currentEditor.setLine(fm.endLine, spacers);
          } else {
            currentEditor == null ? void 0 : currentEditor.setLine(fm.endLine, "");
          }
          for (let i = 0; i < linesToWriteCount; i++) {
            const lineToWrite = fm.startLine + i;
            currentEditor == null ? void 0 : currentEditor.setLine(lineToWrite, "	".repeat(fm.offset) + linesToWrite[i]);
          }
        });
      } else {
        if (currentFocusLine === void 0 || currentFocusLine === null) {
          this.showNotice("no line in focus", true);
          return;
        }
        const isBulletPoint = this.getBulletPointNr(evt.target.parentNode);
        if (isBulletPoint === null) {
          this.showNotice("line in focus doesn't have bullet point", true);
          return;
        }
        const bulletPointsCount = this.countBulletPointLines(evt.target.parentNode);
        let rootLine = (_e = (_d = this.app.workspace.activeEditor) == null ? void 0 : _d.editor) == null ? void 0 : _e.getLine(currentFocusLine);
        const rootOffset = rootLine == null ? void 0 : rootLine.match(/^\s*/)[0].length;
        if (rootOffset >= 1)
          rootLine = rootLine.substring(rootOffset);
        let linesToIsolate = [rootLine];
        for (let i = 1; i < bulletPointsCount; i++) {
          let lineToIsolate = (_g = (_f = this.app.workspace.activeEditor) == null ? void 0 : _f.editor) == null ? void 0 : _g.getLine(currentFocusLine + i);
          if (rootOffset >= 1) {
            lineToIsolate = lineToIsolate == null ? void 0 : lineToIsolate.substring(rootOffset);
          }
          linesToIsolate.push(lineToIsolate);
        }
        console.log(linesToIsolate);
        let bulletPointsText = linesToIsolate.join("\n");
        const frontmatterJson = {
          "origin": (_i = (_h = this.app.workspace.activeEditor) == null ? void 0 : _h.file) == null ? void 0 : _i.path,
          "startLine": currentFocusLine,
          "endLine": currentFocusLine + bulletPointsCount - 1,
          "offset": rootOffset
        };
        const frontmatter = this.convertJsonToFrontmatter(frontmatterJson);
        bulletPointsText = frontmatter + bulletPointsText;
        const isolatedFileAbstract = this.app.vault.getAbstractFileByPath(ISOLATION_FILE);
        if (isolatedFileAbstract)
          this.app.vault.delete(isolatedFileAbstract);
        const isolatedFile = await this.app.vault.create(ISOLATION_FILE, bulletPointsText);
        await this.app.workspace.getLeaf().openFile(isolatedFile);
      }
    }
  }
  showNotice(msg, isFail = false) {
    new import_obsidian.Notice(isFail ? `BulletPointIsolation failed: ${msg}.` : msg);
  }
  getBulletPointNr(elem) {
    const match = elem.className.match(/HyperMD-list-line-(\d+)/);
    return match ? parseInt(match[1]) : null;
  }
  countBulletPointLines(elem) {
    let sibling = elem;
    const rootOffset = this.getBulletPointNr(sibling);
    let siblingCount = 1;
    while (sibling.nextSibling !== null) {
      sibling = sibling.nextSibling;
      const siblingOffset = this.getBulletPointNr(sibling);
      if (rootOffset >= siblingOffset)
        break;
      siblingCount++;
    }
    return siblingCount;
  }
  convertJsonToFrontmatter(obj, pendingNewline = true) {
    let frontmatterArr = Object.keys(obj).map((key) => `${key}: ${obj[key]}`);
    frontmatterArr.push("---");
    frontmatterArr.unshift("---");
    let frontmatterText = frontmatterArr.join("\n");
    return pendingNewline ? frontmatterText + "\n" : frontmatterText;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var BulletPointIsolatorModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var BulletPointIsolatorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgdGVzdCB9IGZyb20gJ25vZGU6dGVzdCc7XG5pbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgTm90aWNlLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIEVkaXRvclBvc2l0aW9uIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5cbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxuXG5pbnRlcmZhY2UgQnVsbGV0UG9pbnRJc29sYXRvclNldHRpbmdzIHtcblx0bXlTZXR0aW5nOiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEJ1bGxldFBvaW50SXNvbGF0b3JTZXR0aW5ncyA9IHtcblx0bXlTZXR0aW5nOiAnZGVmYXVsdCdcbn1cblxuXG5cbmNvbnN0IElTT0xBVElPTl9GSUxFID0gXCJpc29sYXRpb24ubWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVsbGV0UG9pbnRJc29sYXRvciBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBCdWxsZXRQb2ludElzb2xhdG9yU2V0dGluZ3M7XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cblx0XHQvLyBUaGlzIGNyZWF0ZXMgYW4gaWNvbiBpbiB0aGUgbGVmdCByaWJib24uXG5cdFx0Y29uc3QgcmliYm9uSWNvbkVsID0gdGhpcy5hZGRSaWJib25JY29uKCdkaWNlJywgJ0J1bGxldFBvaW50SXNvbGF0b3IgUGx1Z2luJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0Ly8gQ2FsbGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBpY29uLlxuXHRcdFx0bmV3IE5vdGljZSgnVGhpcyBpcyBhIG5vdGljZSBpIGd1ZXNzIScpO1xuXHRcdH0pO1xuXHRcdC8vIFBlcmZvcm0gYWRkaXRpb25hbCB0aGluZ3Mgd2l0aCB0aGUgcmliYm9uXG5cdFx0cmliYm9uSWNvbkVsLmFkZENsYXNzKCdteS1wbHVnaW4tcmliYm9uLWNsYXNzJyk7XG5cblx0XHQvLyBUaGlzIGFkZHMgYSBzdGF0dXMgYmFyIGl0ZW0gdG8gdGhlIGJvdHRvbSBvZiB0aGUgYXBwLiBEb2VzIG5vdCB3b3JrIG9uIG1vYmlsZSBhcHBzLlxuXHRcdGNvbnN0IHN0YXR1c0Jhckl0ZW1FbCA9IHRoaXMuYWRkU3RhdHVzQmFySXRlbSgpO1xuXHRcdHN0YXR1c0Jhckl0ZW1FbC5zZXRUZXh0KCdTdGF0dXMgQmFyIFRleHQnKTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHNpbXBsZSBjb21tYW5kIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBhbnl3aGVyZVxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ29wZW4tc2FtcGxlLW1vZGFsLXNpbXBsZScsXG5cdFx0XHRuYW1lOiAnT3BlbiBzYW1wbGUgbW9kYWwgKHNpbXBsZSknLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcblx0XHRcdFx0bmV3IEJ1bGxldFBvaW50SXNvbGF0b3JNb2RhbCh0aGlzLmFwcCkub3BlbigpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdC8vIFRoaXMgYWRkcyBhbiBlZGl0b3IgY29tbWFuZCB0aGF0IGNhbiBwZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG9uIHRoZSBjdXJyZW50IGVkaXRvciBpbnN0YW5jZVxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ3NhbXBsZS1lZGl0b3ItY29tbWFuZCcsXG5cdFx0XHRuYW1lOiAnQnVsbGV0UG9pbnRJc29sYXRvciBlZGl0b3IgY29tbWFuZCcsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblx0XHRcdFx0Y29uc29sZS5sb2coZWRpdG9yLmdldFNlbGVjdGlvbigpKTtcblx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oJ0J1bGxldFBvaW50SXNvbGF0b3IgRWRpdG9yIENvbW1hbmQnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvLyBUaGlzIGFkZHMgYSBjb21wbGV4IGNvbW1hbmQgdGhhdCBjYW4gY2hlY2sgd2hldGhlciB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgYXBwIGFsbG93cyBleGVjdXRpb24gb2YgdGhlIGNvbW1hbmRcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdvcGVuLXNhbXBsZS1tb2RhbC1jb21wbGV4Jyxcblx0XHRcdG5hbWU6ICdPcGVuIHNhbXBsZSBtb2RhbCAoY29tcGxleCknLFxuXHRcdFx0Y2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XG5cdFx0XHRcdC8vIENvbmRpdGlvbnMgdG8gY2hlY2tcblx0XHRcdFx0Y29uc3QgbWFya2Rvd25WaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRcdFx0aWYgKG1hcmtkb3duVmlldykge1xuXHRcdFx0XHRcdC8vIElmIGNoZWNraW5nIGlzIHRydWUsIHdlJ3JlIHNpbXBseSBcImNoZWNraW5nXCIgaWYgdGhlIGNvbW1hbmQgY2FuIGJlIHJ1bi5cblx0XHRcdFx0XHQvLyBJZiBjaGVja2luZyBpcyBmYWxzZSwgdGhlbiB3ZSB3YW50IHRvIGFjdHVhbGx5IHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cblx0XHRcdFx0XHRpZiAoIWNoZWNraW5nKSB7XG5cdFx0XHRcdFx0XHRuZXcgQnVsbGV0UG9pbnRJc29sYXRvck1vZGFsKHRoaXMuYXBwKS5vcGVuKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gVGhpcyBjb21tYW5kIHdpbGwgb25seSBzaG93IHVwIGluIENvbW1hbmQgUGFsZXR0ZSB3aGVuIHRoZSBjaGVjayBmdW5jdGlvbiByZXR1cm5zIHRydWVcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IEJ1bGxldFBvaW50SXNvbGF0b3JTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cblx0XHQvLyBJZiB0aGUgcGx1Z2luIGhvb2tzIHVwIGFueSBnbG9iYWwgRE9NIGV2ZW50cyAob24gcGFydHMgb2YgdGhlIGFwcCB0aGF0IGRvZXNuJ3QgYmVsb25nIHRvIHRoaXMgcGx1Z2luKVxuXHRcdC8vIFVzaW5nIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgd2hlbiB0aGlzIHBsdWdpbiBpcyBkaXNhYmxlZC5cblx0XHR0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycsIGFzeW5jIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHRcdGF3YWl0IHRoaXMuaXNvbGF0ZUJ1bGxldFBvaW50KGV2dCk7XG5cdFx0fSk7XG5cblx0XHQvLyBXaGVuIHJlZ2lzdGVyaW5nIGludGVydmFscywgdGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2xlYXIgdGhlIGludGVydmFsIHdoZW4gdGhlIHBsdWdpbiBpcyBkaXNhYmxlZC5cblx0XHR0aGlzLnJlZ2lzdGVySW50ZXJ2YWwod2luZG93LnNldEludGVydmFsKCgpID0+IGNvbnNvbGUubG9nKCdzZXRJbnRlcnZhbCcpLCA1ICogNjAgKiAxMDAwKSk7XG5cdH1cblxuXHRhc3luYyBpc29sYXRlQnVsbGV0UG9pbnQoZXZ0OiBNb3VzZUV2ZW50KSB7XG5cdFx0XG5cdFx0aWYgKGV2dC5hbHRLZXkgJiYgZXZ0LmN0cmxLZXkgJiYgdGhpcy5nZXRCdWxsZXRQb2ludE5yKGV2dC50YXJnZXQucGFyZW50Tm9kZSkpIHtcblx0XHRcdFxuXHRcdFx0Y29uc29sZS5sb2coXCJCdWxsZXQgUG9pbnQgSXNvbGF0b3IgYWN0aXZhdGVkIHdpdGggQ3RybCtBbHQrQ2xpY2suXCIpO1xuXHRcdFx0dGhpcy5zaG93Tm90aWNlKFwiQnVsbGV0IFBvaW50IElzb2xhdG9yIGFjdGl2YXRlZCB3aXRoIEN0cmwrQWx0K0NsaWNrLlwiKTtcblxuXHRcdFx0Ly8gR2V0IHNvbWUgaW5mb3MgYWJvdXQgdGhlIGZpbGUgaW4gZm9jdXMuXG5cdFx0XHRjb25zdCBmaWxlT3JpZ2luID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZmlsZTtcblx0XHRcdGNvbnN0IGN1cnJlbnRGb2N1c0xpbmUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlRWRpdG9yPy5lZGl0b3I/LmdldEN1cnNvcigpLmxpbmU7XG5cblx0XHRcdC8vIENoZWNrIGlmIHdlIGFyZSBpbiB0aGUgaXNvbGF0aW9uIGZpbGUuXG5cdFx0XHRpZiAoZmlsZU9yaWdpbj8ucGF0aCA9PT0gbnVsbCB8fCBmaWxlT3JpZ2luPy5wYXRoID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0dGhpcy5zaG93Tm90aWNlKFwiZmlsZSBvcmlnaW4gaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkXCIsIHRydWUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChmaWxlT3JpZ2luPy5wYXRoID09PSBJU09MQVRJT05fRklMRSkge1xuXG5cdFx0XHRcdC8vIFRoZSBzZWxlY3RlZCBmaWxlIG11c3QgY29udGFpbiBhIGJ1bGxldCBwb2ludC5cblx0XHRcdFx0Y29uc3QgYnVsbGV0UG9pbnROciA9IHRoaXMuZ2V0QnVsbGV0UG9pbnROcihldnQudGFyZ2V0LnBhcmVudE5vZGUpO1xuXHRcdFx0XHRpZiAoYnVsbGV0UG9pbnROciA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHRoaXMuc2hvd05vdGljZShcImxpbmUgaW4gZm9jdXMgZG9lc24ndCBoYXZlIGJ1bGxldCBwb2ludFwiLCB0cnVlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAoIGJ1bGxldFBvaW50TnIgIT09IDEpIHtcblx0XHRcdFx0XHR0aGlzLnNob3dOb3RpY2UoXCJsaW5lIGluIGZvY3VzIGlzbid0IHJvb3QgYnVsbGV0IHBvaW50XCIsIHRydWUpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb2Nlc3MgdGhlIGZyb250bWF0dGVyLCB0aGVuIG1vZGlmeSB0aGUgZmlsZXMgdXNpbmcgdGhvc2UgYXMgaW5wdXQuXG5cdFx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlT3JpZ2luLCBhc3luYyAoZm0pID0+IHtcblxuXHRcdFx0XHRcdC8vIEdldCB0aGUgYW1vdW50IG9mIGxpbmVzIHdlIG5lZWQgdG8gd3JpdGUuXG5cdFx0XHRcdFx0Y29uc3QgZm1MZW5ndGggPSBPYmplY3Qua2V5cyhmbSkubGVuZ3RoICsgMjtcblx0XHRcdFx0XHRjb25zdCBpc29sYXRpb25GaWxlTGluZUNvdW50ID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZWRpdG9yPy5saW5lQ291bnQoKTtcblxuXHRcdFx0XHRcdC8vIFJlYWQgdGhlIGxpbmVzIHRvIHRyYW5zZmVyLlxuXHRcdFx0XHRcdGxldCBsaW5lc1RvV3JpdGUgPSBbXTtcblx0XHRcdFx0XHRmb3IgKGxldCBsaW5lTnIgPSBmbUxlbmd0aDsgbGluZU5yIDwgaXNvbGF0aW9uRmlsZUxpbmVDb3VudDsgbGluZU5yKyspIHtcblx0XHRcdFx0XHRcdGxpbmVzVG9Xcml0ZS5wdXNoKHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3I/LmVkaXRvcj8uZ2V0TGluZShsaW5lTnIpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29uc3QgbGluZXNUb1dyaXRlQ291bnQgPSBsaW5lc1RvV3JpdGUubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gT3BlbiB0aGUgb3JpZ2luIGZpbGUgYW5kIGdldCB0aGUgZWRpdG9yLlxuXHRcdFx0XHRcdGNvbnN0IG9yaWdpbkZpbGVBYnN0cmFjdCA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmbS5vcmlnaW4pO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCkub3BlbkZpbGUob3JpZ2luRmlsZUFic3RyYWN0KTtcblx0XHRcdFx0XHRjb25zdCBjdXJyZW50RWRpdG9yID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZWRpdG9yO1xuXG5cdFx0XHRcdFx0Ly8gRnJlZSB1cCB0aGUgc3BhY2UgaW4gdGhlIG9yaWdpbiBmaWxlLlxuXHRcdFx0XHRcdGZvciAobGV0IGxpbmVOciA9IGZtLnN0YXJ0TGluZTsgbGluZU5yIDwgZm0uZW5kTGluZTsgbGluZU5yKyspIHtcblx0XHRcdFx0XHRcdGN1cnJlbnRFZGl0b3I/LnNldExpbmUobGluZU5yLCBcIlwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gVE9ETyBDaGVjayB3aGF0IGlmIGxlc3MgbGluZXMuXG5cdFx0XHRcdFx0aWYgKGxpbmVzVG9Xcml0ZUNvdW50ID4gKChmbS5lbmRMaW5lIC0gZm0uc3RhcnRMaW5lKSArIDEpKSB7XG5cdFx0XHRcdFx0XHQvLyBTZXQgdGhlIGxhc3QgbGluZSB0b1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3BhY2VycyA9IFwiXFxuXCIucmVwZWF0KGxpbmVzVG9Xcml0ZUNvdW50IC0gKChmbS5lbmRMaW5lIC0gZm0uc3RhcnRMaW5lKSArIDEpKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRFZGl0b3I/LnNldExpbmUoZm0uZW5kTGluZSwgc3BhY2Vycyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gU2V0IHRoZSBsYXN0IGxpbmUgb2YgdGhlIHJhbmdlIHRvIHdyaXRlIHRvIGEgc2ltcGxlIHNwYWNlLlxuXHRcdFx0XHRcdFx0Y3VycmVudEVkaXRvcj8uc2V0TGluZShmbS5lbmRMaW5lLCBcIlwiKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBUcmFuc2ZlciB0aGUgbGluZXMgZnJvbSBpc29sYXRpb24gdG8gdGhlIG5ldyBwbGFjZS5cblx0XHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzVG9Xcml0ZUNvdW50OyBpKyspIHtcblx0XHRcdFx0XHRcdGNvbnN0IGxpbmVUb1dyaXRlID0gZm0uc3RhcnRMaW5lICsgaTtcblx0XHRcdFx0XHRcdGN1cnJlbnRFZGl0b3I/LnNldExpbmUobGluZVRvV3JpdGUsIFwiXFx0XCIucmVwZWF0KGZtLm9mZnNldCkgKyBsaW5lc1RvV3JpdGVbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gQSBzZWxlY3RlZCBsaW5lIGlzIHJlcXVpcmVkLlxuXHRcdFx0XHRpZiAoY3VycmVudEZvY3VzTGluZSA9PT0gdW5kZWZpbmVkIHx8IGN1cnJlbnRGb2N1c0xpbmUgPT09IG51bGwpIHtcblx0XHRcdFx0XHR0aGlzLnNob3dOb3RpY2UoXCJubyBsaW5lIGluIGZvY3VzXCIsIHRydWUpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRoZSBzZWxlY3RlZCBmaWxlIG11c3QgY29udGFpbiBhIGJ1bGxldCBwb2ludC5cblx0XHRcdFx0Y29uc3QgaXNCdWxsZXRQb2ludCA9IHRoaXMuZ2V0QnVsbGV0UG9pbnROcihldnQudGFyZ2V0LnBhcmVudE5vZGUpO1xuXHRcdFx0XHRpZiAoaXNCdWxsZXRQb2ludCA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHRoaXMuc2hvd05vdGljZShcImxpbmUgaW4gZm9jdXMgZG9lc24ndCBoYXZlIGJ1bGxldCBwb2ludFwiLCB0cnVlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gR2V0IGFsbCB0aGUgYnVsbGV0IGFuZCBzdWJidWxsZXQgcG9pbnRzLlxuXHRcdFx0XHRjb25zdCBidWxsZXRQb2ludHNDb3VudCA9IHRoaXMuY291bnRCdWxsZXRQb2ludExpbmVzKGV2dC50YXJnZXQucGFyZW50Tm9kZSk7XG5cdFxuXHRcdFx0XHQvLyBHZXQgY3VycmVudCBhY3RpdmUgbGluZS5cblx0XHRcdFx0bGV0IHJvb3RMaW5lID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZWRpdG9yPy5nZXRMaW5lKGN1cnJlbnRGb2N1c0xpbmUpO1xuXHRcblx0XHRcdFx0Ly8gR2V0IHRoZSByb290IG9mZnNldCBhbmQgbm9ybWFsaXplIHRoZSBmaXJzdCBsaW5lLlxuXHRcdFx0XHRjb25zdCByb290T2Zmc2V0ID0gcm9vdExpbmU/Lm1hdGNoKC9eXFxzKi8pWzBdLmxlbmd0aDtcblx0XHRcdFx0aWYgKHJvb3RPZmZzZXQgPj0gMSlcblx0XHRcdFx0XHRyb290TGluZSA9IHJvb3RMaW5lLnN1YnN0cmluZyhyb290T2Zmc2V0KTtcblx0XG5cdFx0XHRcdC8vIEl0ZXJhdGUgdGhyb3VnaCB0aGUgbGluZXMgYWZmZWN0ZWQgYnkgdGhlIGNsaWNrLlxuXHRcdFx0XHRsZXQgbGluZXNUb0lzb2xhdGUgPSBbcm9vdExpbmVdO1xuXHRcdFx0XHRmb3IgKGxldCBpID0gMTsgaSA8IGJ1bGxldFBvaW50c0NvdW50OyBpKyspIHtcblx0XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBsaW5lLlxuXHRcdFx0XHRcdGxldCBsaW5lVG9Jc29sYXRlID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZWRpdG9yPy5nZXRMaW5lKGN1cnJlbnRGb2N1c0xpbmUgKyBpKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBOb3JtYWxpemUgdGhlIGxlYWRpbmcgc3BhY2VzIGFuZCBpZiBpdCBpcyBhIHNwYWNlIHRoZW4gcmVwbGFjZSBpdCB3aXRoIHRhYnMuXG5cdFx0XHRcdFx0aWYgKHJvb3RPZmZzZXQgPj0gMSkge1xuXHRcdFx0XHRcdFx0bGluZVRvSXNvbGF0ZSA9IGxpbmVUb0lzb2xhdGU/LnN1YnN0cmluZyhyb290T2Zmc2V0KTtcblx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdC8vIFB1c2ggdGhlIGxpbmUgdG8gdGhlIGFycmF5LlxuXHRcdFx0XHRcdGxpbmVzVG9Jc29sYXRlLnB1c2gobGluZVRvSXNvbGF0ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc29sZS5sb2cobGluZXNUb0lzb2xhdGUpO1xuXHRcblx0XHRcdFx0Ly8gSm9pbiB0aGUgbGluZXMgdG8gdXNlIHRoZW0gaW5zaWRlIHRoZSBjcmVhdGUgZnVuY3Rpb24gbGF0ZXIuXG5cdFx0XHRcdGxldCBidWxsZXRQb2ludHNUZXh0ID0gbGluZXNUb0lzb2xhdGUuam9pbihcIlxcblwiKTtcblx0XG5cdFx0XHRcdC8vIEFkZCBzb21lIGZyb250bWF0dGVyIHRvIHRoZSBidWxsZXRwb2ludCB0byBjb3B5LlxuXHRcdFx0XHRjb25zdCBmcm9udG1hdHRlckpzb24gPSB7XG5cdFx0XHRcdFx0XCJvcmlnaW5cIjogdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZmlsZT8ucGF0aCxcblx0XHRcdFx0XHRcInN0YXJ0TGluZVwiOiBjdXJyZW50Rm9jdXNMaW5lLFxuXHRcdFx0XHRcdFwiZW5kTGluZVwiOiBjdXJyZW50Rm9jdXNMaW5lICsgYnVsbGV0UG9pbnRzQ291bnQgLSAxLFxuXHRcdFx0XHRcdFwib2Zmc2V0XCI6IHJvb3RPZmZzZXRcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBmcm9udG1hdHRlciA9IHRoaXMuY29udmVydEpzb25Ub0Zyb250bWF0dGVyKGZyb250bWF0dGVySnNvbik7XG5cdFx0XHRcdGJ1bGxldFBvaW50c1RleHQgPSBmcm9udG1hdHRlciArIGJ1bGxldFBvaW50c1RleHQ7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIHRlbXBvcmFyeSBmaWxlIGlmIGl0IGRvZXNudCBleGlzdCBvdGhlcndpc2UgZGVsZXRlIGl0IGZpcnN0LlxuXHRcdFx0XHRjb25zdCBpc29sYXRlZEZpbGVBYnN0cmFjdCA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChJU09MQVRJT05fRklMRSk7XG5cdFx0XHRcdGlmIChpc29sYXRlZEZpbGVBYnN0cmFjdClcblx0XHRcdFx0XHR0aGlzLmFwcC52YXVsdC5kZWxldGUoaXNvbGF0ZWRGaWxlQWJzdHJhY3QpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gV3JpdGUgdGhlIGJ1bGxldHMgdG8gdGhlIHRlbXBvcmFyeSBmaWxlLlxuXHRcdFx0XHRjb25zdCBpc29sYXRlZEZpbGUgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGUoSVNPTEFUSU9OX0ZJTEUsIGJ1bGxldFBvaW50c1RleHQpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gQ3JlYXRlIG5ldyBsZWFmIGFuZCBvcGVuIGEgZmlsZSB0aGVyZS5cblx0XHRcdFx0YXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoKS5vcGVuRmlsZShpc29sYXRlZEZpbGUpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cdH1cblxuXHRzaG93Tm90aWNlKG1zZywgaXNGYWlsOiBib29sZWFuID0gZmFsc2UpIHtcblx0XHRuZXcgTm90aWNlKGlzRmFpbCA/IGBCdWxsZXRQb2ludElzb2xhdGlvbiBmYWlsZWQ6ICR7bXNnfS5gIDogbXNnKTtcblx0fVxuXG5cdGdldEJ1bGxldFBvaW50TnIoZWxlbSkge1xuXHRcdGNvbnN0IG1hdGNoID0gZWxlbS5jbGFzc05hbWUubWF0Y2goL0h5cGVyTUQtbGlzdC1saW5lLShcXGQrKS8pO1xuXHRcdHJldHVybiBtYXRjaCA/IHBhcnNlSW50KG1hdGNoWzFdKSA6IG51bGw7XG5cdH1cblxuXHRjb3VudEJ1bGxldFBvaW50TGluZXMoZWxlbSkge1xuXG5cdFx0Ly8gU2V0IHRoZSBwYXNzZWQgZWxlbWVudCBhcyBpbml0aWFsIHNpYmxpbmcgYW5kIGhldCBpdHMgb2Zmc2V0IG51bWJlci5cblx0XHRsZXQgc2libGluZyA9IGVsZW07XG5cdFx0Y29uc3Qgcm9vdE9mZnNldCA9IHRoaXMuZ2V0QnVsbGV0UG9pbnROcihzaWJsaW5nKTtcblxuXHRcdGxldCBzaWJsaW5nQ291bnQgPSAxO1xuXHRcdHdoaWxlIChzaWJsaW5nLm5leHRTaWJsaW5nICE9PSBudWxsKSB7XG5cblxuXHRcdFx0Ly8gU2V0IHRoZSBzaWJsaW5nIGFzIGl0cyBuZXh0IHNpYmxpbmcuXG5cdFx0XHRzaWJsaW5nID0gc2libGluZy5uZXh0U2libGluZztcblx0XHRcdFxuXHRcdFx0Ly8gSWYgdGhlIG9mZnNldCBudW1iZXIgaXMgZXF1YWwgb3IgbGVzcywgYnJlYWsgdGhlIGxvb3AuXG5cdFx0XHRjb25zdCBzaWJsaW5nT2Zmc2V0ID0gdGhpcy5nZXRCdWxsZXRQb2ludE5yKHNpYmxpbmcpO1xuXHRcdFx0aWYgKHJvb3RPZmZzZXQgPj0gc2libGluZ09mZnNldClcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdC8vIEluY3JlbWVudCB0aGUgc2libGluZ3MgY291bnQuXG5cdFx0XHRzaWJsaW5nQ291bnQrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gc2libGluZ0NvdW50O1xuXHR9XG5cblx0Y29udmVydEpzb25Ub0Zyb250bWF0dGVyKG9iaiwgcGVuZGluZ05ld2xpbmU6IGJvb2xlYW4gPSB0cnVlKSB7XG5cdFx0bGV0IGZyb250bWF0dGVyQXJyID0gT2JqZWN0LmtleXMob2JqKS5tYXAoKGtleSkgPT4gYCR7a2V5fTogJHtvYmpba2V5XX1gKTtcblx0XHRmcm9udG1hdHRlckFyci5wdXNoKFwiLS0tXCIpO1xuXHRcdGZyb250bWF0dGVyQXJyLnVuc2hpZnQoXCItLS1cIik7XG5cdFx0bGV0IGZyb250bWF0dGVyVGV4dCA9IGZyb250bWF0dGVyQXJyLmpvaW4oXCJcXG5cIilcblx0XHRyZXR1cm4gcGVuZGluZ05ld2xpbmVcblx0XHRcdD8gZnJvbnRtYXR0ZXJUZXh0ICsgXCJcXG5cIlxuXHRcdFx0OiBmcm9udG1hdHRlclRleHQ7XG5cdH1cblxuXHRvbnVubG9hZCgpIHtcblxuXHR9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9XG5cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdH1cbn1cblxuY2xhc3MgQnVsbGV0UG9pbnRJc29sYXRvck1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xuXHRcdHN1cGVyKGFwcCk7XG5cdH1cblxuXHRvbk9wZW4oKSB7XG5cdFx0Y29uc3Qge2NvbnRlbnRFbH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5zZXRUZXh0KCdXb2FoIScpO1xuXHR9XG5cblx0b25DbG9zZSgpIHtcblx0XHRjb25zdCB7Y29udGVudEVsfSA9IHRoaXM7XG5cdFx0Y29udGVudEVsLmVtcHR5KCk7XG5cdH1cbn1cblxuY2xhc3MgQnVsbGV0UG9pbnRJc29sYXRvclNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBCdWxsZXRQb2ludElzb2xhdG9yO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEJ1bGxldFBvaW50SXNvbGF0b3IpIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHtjb250YWluZXJFbH0gPSB0aGlzO1xuXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHt0ZXh0OiAnU2V0dGluZ3MgZm9yIG15IGF3ZXNvbWUgcGx1Z2luLid9KTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1NldHRpbmcgIzEnKVxuXHRcdFx0LnNldERlc2MoJ0l0XFwncyBhIHNlY3JldCcpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdFbnRlciB5b3VyIHNlY3JldCcpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmcpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnU2VjcmV0OiAnICsgdmFsdWUpO1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZyA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxzQkFBNEc7QUFTNUcsSUFBTSxtQkFBZ0Q7QUFBQSxFQUNyRCxXQUFXO0FBQ1o7QUFJQSxJQUFNLGlCQUFpQjtBQUV2QixJQUFxQixzQkFBckIsY0FBaUQsdUJBQU87QUFBQSxFQUd2RCxNQUFNLFNBQVM7QUFDZCxVQUFNLEtBQUssYUFBYTtBQUd4QixVQUFNLGVBQWUsS0FBSyxjQUFjLFFBQVEsOEJBQThCLENBQUMsUUFBb0I7QUFFbEcsVUFBSSx1QkFBTywyQkFBMkI7QUFBQSxJQUN2QyxDQUFDO0FBRUQsaUJBQWEsU0FBUyx3QkFBd0I7QUFHOUMsVUFBTSxrQkFBa0IsS0FBSyxpQkFBaUI7QUFDOUMsb0JBQWdCLFFBQVEsaUJBQWlCO0FBR3pDLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNO0FBQ2YsWUFBSSx5QkFBeUIsS0FBSyxHQUFHLEVBQUUsS0FBSztBQUFBLE1BQzdDO0FBQUEsSUFDRCxDQUFDO0FBRUQsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixnQkFBZ0IsQ0FBQyxRQUFnQixTQUF1QjtBQUN2RCxnQkFBUSxJQUFJLE9BQU8sYUFBYSxDQUFDO0FBQ2pDLGVBQU8saUJBQWlCLG9DQUFvQztBQUFBLE1BQzdEO0FBQUEsSUFDRCxDQUFDO0FBRUQsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixlQUFlLENBQUMsYUFBc0I7QUFFckMsY0FBTSxlQUFlLEtBQUssSUFBSSxVQUFVLG9CQUFvQiw0QkFBWTtBQUN4RSxZQUFJLGNBQWM7QUFHakIsY0FBSSxDQUFDLFVBQVU7QUFDZCxnQkFBSSx5QkFBeUIsS0FBSyxHQUFHLEVBQUUsS0FBSztBQUFBLFVBQzdDO0FBR0EsaUJBQU87QUFBQSxRQUNSO0FBQUEsTUFDRDtBQUFBLElBQ0QsQ0FBQztBQUdELFNBQUssY0FBYyxJQUFJLDhCQUE4QixLQUFLLEtBQUssSUFBSSxDQUFDO0FBSXBFLFNBQUssaUJBQWlCLFVBQVUsU0FBUyxPQUFPLFFBQW9CO0FBQ25FLFlBQU0sS0FBSyxtQkFBbUIsR0FBRztBQUFBLElBQ2xDLENBQUM7QUFHRCxTQUFLLGlCQUFpQixPQUFPLFlBQVksTUFBTSxRQUFRLElBQUksYUFBYSxHQUFHLElBQUksS0FBSyxHQUFJLENBQUM7QUFBQSxFQUMxRjtBQUFBLEVBRUEsTUFBTSxtQkFBbUIsS0FBaUI7QUF0RjNDO0FBd0ZFLFFBQUksSUFBSSxVQUFVLElBQUksV0FBVyxLQUFLLGlCQUFpQixJQUFJLE9BQU8sVUFBVSxHQUFHO0FBRTlFLGNBQVEsSUFBSSxzREFBc0Q7QUFDbEUsV0FBSyxXQUFXLHNEQUFzRDtBQUd0RSxZQUFNLGNBQWEsVUFBSyxJQUFJLFVBQVUsaUJBQW5CLG1CQUFpQztBQUNwRCxZQUFNLG9CQUFtQixnQkFBSyxJQUFJLFVBQVUsaUJBQW5CLG1CQUFpQyxXQUFqQyxtQkFBeUMsWUFBWTtBQUc5RSxXQUFJLHlDQUFZLFVBQVMsU0FBUSx5Q0FBWSxVQUFTLFFBQVc7QUFDaEUsYUFBSyxXQUFXLDJDQUEyQyxJQUFJO0FBQy9EO0FBQUEsTUFDRCxZQUNTLHlDQUFZLFVBQVMsZ0JBQWdCO0FBRzdDLGNBQU0sZ0JBQWdCLEtBQUssaUJBQWlCLElBQUksT0FBTyxVQUFVO0FBQ2pFLFlBQUksa0JBQWtCLE1BQU07QUFDM0IsZUFBSyxXQUFXLDJDQUEyQyxJQUFJO0FBQy9EO0FBQUEsUUFDRCxXQUNVLGtCQUFrQixHQUFHO0FBQzlCLGVBQUssV0FBVyx5Q0FBeUMsSUFBSTtBQUM3RDtBQUFBLFFBQ0Q7QUFHQSxjQUFNLEtBQUssSUFBSSxZQUFZLG1CQUFtQixZQUFZLE9BQU8sT0FBTztBQXBINUUsY0FBQUEsS0FBQUMsS0FBQUMsS0FBQUMsS0FBQUM7QUF1SEssZ0JBQU0sV0FBVyxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVM7QUFDMUMsZ0JBQU0sMEJBQXlCSCxPQUFBRCxNQUFBLEtBQUssSUFBSSxVQUFVLGlCQUFuQixnQkFBQUEsSUFBaUMsV0FBakMsZ0JBQUFDLElBQXlDO0FBR3hFLGNBQUksZUFBZSxDQUFDO0FBQ3BCLG1CQUFTLFNBQVMsVUFBVSxTQUFTLHdCQUF3QixVQUFVO0FBQ3RFLHlCQUFhLE1BQUtFLE9BQUFELE1BQUEsS0FBSyxJQUFJLFVBQVUsaUJBQW5CLGdCQUFBQSxJQUFpQyxXQUFqQyxnQkFBQUMsSUFBeUMsUUFBUSxPQUFPO0FBQUEsVUFDM0U7QUFDQSxnQkFBTSxvQkFBb0IsYUFBYTtBQUd2QyxnQkFBTSxxQkFBcUIsS0FBSyxJQUFJLE1BQU0sc0JBQXNCLEdBQUcsTUFBTTtBQUN6RSxnQkFBTSxLQUFLLElBQUksVUFBVSxRQUFRLEVBQUUsU0FBUyxrQkFBa0I7QUFDOUQsZ0JBQU0saUJBQWdCQyxNQUFBLEtBQUssSUFBSSxVQUFVLGlCQUFuQixnQkFBQUEsSUFBaUM7QUFHdkQsbUJBQVMsU0FBUyxHQUFHLFdBQVcsU0FBUyxHQUFHLFNBQVMsVUFBVTtBQUM5RCwyREFBZSxRQUFRLFFBQVE7QUFBQSxVQUNoQztBQUVBLGNBQUksb0JBQXNCLEdBQUcsVUFBVSxHQUFHLFlBQWEsR0FBSTtBQUUxRCxrQkFBTSxVQUFVLEtBQUssT0FBTyxxQkFBc0IsR0FBRyxVQUFVLEdBQUcsWUFBYSxFQUFFO0FBQ2pGLDJEQUFlLFFBQVEsR0FBRyxTQUFTO0FBQUEsVUFDcEMsT0FDSztBQUVKLDJEQUFlLFFBQVEsR0FBRyxTQUFTO0FBQUEsVUFDcEM7QUFHQSxtQkFBUyxJQUFJLEdBQUcsSUFBSSxtQkFBbUIsS0FBSztBQUMzQyxrQkFBTSxjQUFjLEdBQUcsWUFBWTtBQUNuQywyREFBZSxRQUFRLGFBQWEsSUFBSyxPQUFPLEdBQUcsTUFBTSxJQUFJLGFBQWEsQ0FBQztBQUFBLFVBQzVFO0FBQUEsUUFDRCxDQUFDO0FBQUEsTUFFRixPQUNLO0FBR0osWUFBSSxxQkFBcUIsVUFBYSxxQkFBcUIsTUFBTTtBQUNoRSxlQUFLLFdBQVcsb0JBQW9CLElBQUk7QUFDeEM7QUFBQSxRQUNEO0FBR0EsY0FBTSxnQkFBZ0IsS0FBSyxpQkFBaUIsSUFBSSxPQUFPLFVBQVU7QUFDakUsWUFBSSxrQkFBa0IsTUFBTTtBQUMzQixlQUFLLFdBQVcsMkNBQTJDLElBQUk7QUFDL0Q7QUFBQSxRQUNEO0FBRUEsY0FBTSxvQkFBb0IsS0FBSyxzQkFBc0IsSUFBSSxPQUFPLFVBQVU7QUFHMUUsWUFBSSxZQUFXLGdCQUFLLElBQUksVUFBVSxpQkFBbkIsbUJBQWlDLFdBQWpDLG1CQUF5QyxRQUFRO0FBR2hFLGNBQU0sYUFBYSxxQ0FBVSxNQUFNLFFBQVEsR0FBRztBQUM5QyxZQUFJLGNBQWM7QUFDakIscUJBQVcsU0FBUyxVQUFVLFVBQVU7QUFHekMsWUFBSSxpQkFBaUIsQ0FBQyxRQUFRO0FBQzlCLGlCQUFTLElBQUksR0FBRyxJQUFJLG1CQUFtQixLQUFLO0FBRzNDLGNBQUksaUJBQWdCLGdCQUFLLElBQUksVUFBVSxpQkFBbkIsbUJBQWlDLFdBQWpDLG1CQUF5QyxRQUFRLG1CQUFtQjtBQUd4RixjQUFJLGNBQWMsR0FBRztBQUNwQiw0QkFBZ0IsK0NBQWUsVUFBVTtBQUFBLFVBQzFDO0FBR0EseUJBQWUsS0FBSyxhQUFhO0FBQUEsUUFDbEM7QUFDQSxnQkFBUSxJQUFJLGNBQWM7QUFHMUIsWUFBSSxtQkFBbUIsZUFBZSxLQUFLLElBQUk7QUFHL0MsY0FBTSxrQkFBa0I7QUFBQSxVQUN2QixXQUFVLGdCQUFLLElBQUksVUFBVSxpQkFBbkIsbUJBQWlDLFNBQWpDLG1CQUF1QztBQUFBLFVBQ2pELGFBQWE7QUFBQSxVQUNiLFdBQVcsbUJBQW1CLG9CQUFvQjtBQUFBLFVBQ2xELFVBQVU7QUFBQSxRQUNYO0FBQ0EsY0FBTSxjQUFjLEtBQUsseUJBQXlCLGVBQWU7QUFDakUsMkJBQW1CLGNBQWM7QUFHakMsY0FBTSx1QkFBdUIsS0FBSyxJQUFJLE1BQU0sc0JBQXNCLGNBQWM7QUFDaEYsWUFBSTtBQUNILGVBQUssSUFBSSxNQUFNLE9BQU8sb0JBQW9CO0FBRzNDLGNBQU0sZUFBZSxNQUFNLEtBQUssSUFBSSxNQUFNLE9BQU8sZ0JBQWdCLGdCQUFnQjtBQUdqRixjQUFNLEtBQUssSUFBSSxVQUFVLFFBQVEsRUFBRSxTQUFTLFlBQVk7QUFBQSxNQUV6RDtBQUFBLElBRUQ7QUFBQSxFQUNEO0FBQUEsRUFFQSxXQUFXLEtBQUssU0FBa0IsT0FBTztBQUN4QyxRQUFJLHVCQUFPLFNBQVMsZ0NBQWdDLFNBQVMsR0FBRztBQUFBLEVBQ2pFO0FBQUEsRUFFQSxpQkFBaUIsTUFBTTtBQUN0QixVQUFNLFFBQVEsS0FBSyxVQUFVLE1BQU0seUJBQXlCO0FBQzVELFdBQU8sUUFBUSxTQUFTLE1BQU0sQ0FBQyxDQUFDLElBQUk7QUFBQSxFQUNyQztBQUFBLEVBRUEsc0JBQXNCLE1BQU07QUFHM0IsUUFBSSxVQUFVO0FBQ2QsVUFBTSxhQUFhLEtBQUssaUJBQWlCLE9BQU87QUFFaEQsUUFBSSxlQUFlO0FBQ25CLFdBQU8sUUFBUSxnQkFBZ0IsTUFBTTtBQUlwQyxnQkFBVSxRQUFRO0FBR2xCLFlBQU0sZ0JBQWdCLEtBQUssaUJBQWlCLE9BQU87QUFDbkQsVUFBSSxjQUFjO0FBQ2pCO0FBR0Q7QUFBQSxJQUNEO0FBRUEsV0FBTztBQUFBLEVBQ1I7QUFBQSxFQUVBLHlCQUF5QixLQUFLLGlCQUEwQixNQUFNO0FBQzdELFFBQUksaUJBQWlCLE9BQU8sS0FBSyxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLElBQUksR0FBRyxHQUFHO0FBQ3hFLG1CQUFlLEtBQUssS0FBSztBQUN6QixtQkFBZSxRQUFRLEtBQUs7QUFDNUIsUUFBSSxrQkFBa0IsZUFBZSxLQUFLLElBQUk7QUFDOUMsV0FBTyxpQkFDSixrQkFBa0IsT0FDbEI7QUFBQSxFQUNKO0FBQUEsRUFFQSxXQUFXO0FBQUEsRUFFWDtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDMUU7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNwQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNsQztBQUNEO0FBRUEsSUFBTSwyQkFBTixjQUF1QyxzQkFBTTtBQUFBLEVBQzVDLFlBQVksS0FBVTtBQUNyQixVQUFNLEdBQUc7QUFBQSxFQUNWO0FBQUEsRUFFQSxTQUFTO0FBQ1IsVUFBTSxFQUFDLFVBQVMsSUFBSTtBQUNwQixjQUFVLFFBQVEsT0FBTztBQUFBLEVBQzFCO0FBQUEsRUFFQSxVQUFVO0FBQ1QsVUFBTSxFQUFDLFVBQVMsSUFBSTtBQUNwQixjQUFVLE1BQU07QUFBQSxFQUNqQjtBQUNEO0FBRUEsSUFBTSxnQ0FBTixjQUE0QyxpQ0FBaUI7QUFBQSxFQUc1RCxZQUFZLEtBQVUsUUFBNkI7QUFDbEQsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDZjtBQUFBLEVBRUEsVUFBZ0I7QUFDZixVQUFNLEVBQUMsWUFBVyxJQUFJO0FBRXRCLGdCQUFZLE1BQU07QUFFbEIsZ0JBQVksU0FBUyxNQUFNLEVBQUMsTUFBTSxrQ0FBaUMsQ0FBQztBQUVwRSxRQUFJLHdCQUFRLFdBQVcsRUFDckIsUUFBUSxZQUFZLEVBQ3BCLFFBQVEsZUFBZ0IsRUFDeEIsUUFBUSxVQUFRLEtBQ2YsZUFBZSxtQkFBbUIsRUFDbEMsU0FBUyxLQUFLLE9BQU8sU0FBUyxTQUFTLEVBQ3ZDLFNBQVMsT0FBTyxVQUFVO0FBQzFCLGNBQVEsSUFBSSxhQUFhLEtBQUs7QUFDOUIsV0FBSyxPQUFPLFNBQVMsWUFBWTtBQUNqQyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsSUFDaEMsQ0FBQyxDQUFDO0FBQUEsRUFDTDtBQUNEOyIsCiAgIm5hbWVzIjogWyJfYSIsICJfYiIsICJfYyIsICJfZCIsICJfZSJdCn0K
