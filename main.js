/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BulletPointIsolator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var ISOLATION_FILE = "isolation.md";
var BulletPointIsolator = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "BulletPointIsolator Plugin", (evt) => {
      new import_obsidian.Notice("This is a notice i guess!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new BulletPointIsolatorModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "BulletPointIsolator editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("BulletPointIsolator Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new BulletPointIsolatorModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new BulletPointIsolatorSettingTab(this.app, this));
    this.registerDomEvent(document, "click", async (evt) => {
      await this.isolateBulletPoint(evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  async isolateBulletPoint(evt) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    if (evt.altKey && evt.ctrlKey && this.getBulletPointNr(evt.target.parentNode)) {
      this.showNotice("Bullet Point Isolator activated.");
      const fileOrigin = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file;
      const currentFocusLine = (_c = (_b = this.app.workspace.activeEditor) == null ? void 0 : _b.editor) == null ? void 0 : _c.getCursor().line;
      if ((fileOrigin == null ? void 0 : fileOrigin.path) === null || (fileOrigin == null ? void 0 : fileOrigin.path) === void 0) {
        this.showNotice("file origin is either null or undefined", true);
        return;
      } else if ((fileOrigin == null ? void 0 : fileOrigin.path) === ISOLATION_FILE) {
        const bulletPointNr = this.getBulletPointNr(evt.target.parentNode);
        if (bulletPointNr === null) {
          this.showNotice("line in focus doesn't have bullet point", true);
          return;
        } else if (bulletPointNr !== 1) {
          this.showNotice("line in focus isn't root bullet point", true);
          return;
        }
        await this.app.fileManager.processFrontMatter(fileOrigin, async (fm) => {
          var _a2, _b2, _c2, _d2, _e2, _f2;
          const fmLength = Object.keys(fm).length + 2;
          const isolationFileLineCount = (_b2 = (_a2 = this.app.workspace.activeEditor) == null ? void 0 : _a2.editor) == null ? void 0 : _b2.lineCount();
          const isolatedFileAbstract = (_c2 = this.app.workspace.activeEditor) == null ? void 0 : _c2.file;
          let linesToWrite = [];
          for (let lineNr = fmLength; lineNr < isolationFileLineCount; lineNr++) {
            linesToWrite.push((_e2 = (_d2 = this.app.workspace.activeEditor) == null ? void 0 : _d2.editor) == null ? void 0 : _e2.getLine(lineNr));
          }
          const linesToWriteCount = linesToWrite.length;
          const originFileAbstract = this.app.vault.getAbstractFileByPath(fm.origin);
          await this.app.workspace.getLeaf().openFile(originFileAbstract);
          const currentEditor = (_f2 = this.app.workspace.activeEditor) == null ? void 0 : _f2.editor;
          for (let lineNr = fm.startLine; lineNr < fm.endLine; lineNr++) {
            currentEditor == null ? void 0 : currentEditor.setLine(lineNr, "");
          }
          if (linesToWriteCount > fm.endLine - fm.startLine + 1) {
            const spacers = "\n".repeat(linesToWriteCount - (fm.endLine - fm.startLine + 1));
            currentEditor == null ? void 0 : currentEditor.setLine(fm.endLine, spacers);
          } else {
            currentEditor == null ? void 0 : currentEditor.setLine(fm.endLine, "");
          }
          for (let i = 0; i < linesToWriteCount; i++) {
            const lineToWrite = fm.startLine + i;
            currentEditor == null ? void 0 : currentEditor.setLine(lineToWrite, "	".repeat(fm.offset) + linesToWrite[i]);
          }
          await this.app.vault.delete(isolatedFileAbstract);
        });
      } else {
        if (currentFocusLine === void 0 || currentFocusLine === null) {
          this.showNotice("no line in focus", true);
          return;
        }
        const isBulletPoint = this.getBulletPointNr(evt.target.parentNode);
        if (isBulletPoint === null) {
          this.showNotice("line in focus doesn't have bullet point", true);
          return;
        }
        const bulletPointsCount = this.countBulletPointLines(evt.target.parentNode);
        let rootLine = (_e = (_d = this.app.workspace.activeEditor) == null ? void 0 : _d.editor) == null ? void 0 : _e.getLine(currentFocusLine);
        const rootOffset = rootLine == null ? void 0 : rootLine.match(/^\s*/)[0].length;
        if (rootOffset >= 1)
          rootLine = rootLine.substring(rootOffset);
        let linesToIsolate = [rootLine];
        for (let i = 1; i < bulletPointsCount; i++) {
          let lineToIsolate = (_g = (_f = this.app.workspace.activeEditor) == null ? void 0 : _f.editor) == null ? void 0 : _g.getLine(currentFocusLine + i);
          if (rootOffset >= 1) {
            lineToIsolate = lineToIsolate == null ? void 0 : lineToIsolate.substring(rootOffset);
          }
          linesToIsolate.push(lineToIsolate);
        }
        console.log(linesToIsolate);
        let bulletPointsText = linesToIsolate.join("\n");
        const frontmatterJson = {
          "origin": (_i = (_h = this.app.workspace.activeEditor) == null ? void 0 : _h.file) == null ? void 0 : _i.path,
          "startLine": currentFocusLine,
          "endLine": currentFocusLine + bulletPointsCount - 1,
          "offset": rootOffset
        };
        const frontmatter = this.convertJsonToFrontmatter(frontmatterJson);
        bulletPointsText = frontmatter + bulletPointsText;
        const isolatedFileAbstract = this.app.vault.getAbstractFileByPath(ISOLATION_FILE);
        if (isolatedFileAbstract)
          this.app.vault.delete(isolatedFileAbstract);
        const isolatedFile = await this.app.vault.create(ISOLATION_FILE, bulletPointsText);
        await this.app.workspace.getLeaf().openFile(isolatedFile);
      }
    }
  }
  showNotice(msg, isFail = false) {
    new import_obsidian.Notice(isFail ? `BulletPointIsolation failed: ${msg}.` : msg);
  }
  getBulletPointNr(elem) {
    const match = elem.className.match(/HyperMD-list-line-(\d+)/);
    return match ? parseInt(match[1]) : null;
  }
  countBulletPointLines(elem) {
    let sibling = elem;
    const rootOffset = this.getBulletPointNr(sibling);
    let siblingCount = 1;
    while (sibling.nextSibling !== null) {
      sibling = sibling.nextSibling;
      const siblingOffset = this.getBulletPointNr(sibling);
      if (rootOffset >= siblingOffset)
        break;
      siblingCount++;
    }
    return siblingCount;
  }
  convertJsonToFrontmatter(obj, pendingNewline = true) {
    let frontmatterArr = Object.keys(obj).map((key) => `${key}: ${obj[key]}`);
    frontmatterArr.push("---");
    frontmatterArr.unshift("---");
    let frontmatterText = frontmatterArr.join("\n");
    return pendingNewline ? frontmatterText + "\n" : frontmatterText;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var BulletPointIsolatorModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var BulletPointIsolatorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
