/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BulletPointIsolator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var needsWriteBackUnloadEvent = true;
var lastOpenFilePath;
var ISOLATION_FILE_PATH = "isolation.md";
var BulletPointIsolator = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "BulletPointIsolator Plugin", (evt) => {
      new import_obsidian.Notice("This is a notice i guess!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new BulletPointIsolatorModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "BulletPointIsolator editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("BulletPointIsolator Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new BulletPointIsolatorModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new BulletPointIsolatorSettingTab(this.app, this));
    this.app.workspace.on("file-open", async (openedFile) => {
      if (!lastOpenFilePath)
        lastOpenFilePath = openedFile == null ? void 0 : openedFile.path;
      console.log("Before", openedFile == null ? void 0 : openedFile.path);
      if (needsWriteBackUnloadEvent) {
        if (lastOpenFilePath === ISOLATION_FILE_PATH && (openedFile == null ? void 0 : openedFile.path) !== ISOLATION_FILE_PATH) {
          const isolationFile = this.app.vault.getFiles().find((file) => file.path === ISOLATION_FILE_PATH);
          if (isolationFile) {
            await this.app.workspace.getLeaf().openFile(isolationFile);
            this.writeBackModifiedBulletPoint(null).then(async () => await this.app.workspace.getLeaf().openFile(openedFile));
            console.log("After", openedFile == null ? void 0 : openedFile.path);
          }
        }
      }
      lastOpenFilePath = openedFile == null ? void 0 : openedFile.path;
    });
    this.registerDomEvent(document, "click", async (evt) => {
      var _a;
      if (evt.altKey && evt.ctrlKey && this.getBulletPointNr(evt.target.parentNode)) {
        const fileOriginPath = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file.path;
        if (fileOriginPath === null || fileOriginPath === void 0) {
          this.showNotice("file origin is either null or undefined", true);
        } else {
          this.showNotice("Bullet Point Isolator activated.");
          fileOriginPath === ISOLATION_FILE_PATH ? await this.writeBackModifiedBulletPoint(evt) : await this.isolateBulletPoint(evt);
        }
      }
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  async openFileWithoutEvent(file) {
    needsWriteBackUnloadEvent = false;
    await this.app.workspace.getLeaf().openFile(file);
    needsWriteBackUnloadEvent = true;
  }
  async isolateBulletPoint(evt) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const currentFocusLine = (_b = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor) == null ? void 0 : _b.getCursor().line;
    if (currentFocusLine === void 0 || currentFocusLine === null) {
      this.showNotice("no line in focus", true);
      return;
    }
    const isBulletPoint = this.getBulletPointNr(evt.target.parentNode);
    if (isBulletPoint === null) {
      this.showNotice("line in focus doesn't have bullet point", true);
      return;
    }
    const bulletPointsCount = this.countBulletPointLines(evt.target.parentNode);
    let rootLine = (_d = (_c = this.app.workspace.activeEditor) == null ? void 0 : _c.editor) == null ? void 0 : _d.getLine(currentFocusLine);
    const rootOffset = rootLine == null ? void 0 : rootLine.match(/^\s*/)[0].length;
    if (rootOffset >= 1)
      rootLine = rootLine.substring(rootOffset);
    let linesToIsolate = [rootLine];
    for (let i = 1; i < bulletPointsCount; i++) {
      let lineToIsolate = (_f = (_e = this.app.workspace.activeEditor) == null ? void 0 : _e.editor) == null ? void 0 : _f.getLine(currentFocusLine + i);
      if (rootOffset >= 1) {
        lineToIsolate = lineToIsolate == null ? void 0 : lineToIsolate.substring(rootOffset);
      }
      linesToIsolate.push(lineToIsolate);
    }
    let bulletPointsText = linesToIsolate.join("\n");
    const frontmatterJson = {
      "origin": (_h = (_g = this.app.workspace.activeEditor) == null ? void 0 : _g.file) == null ? void 0 : _h.path,
      "startLine": currentFocusLine,
      "endLine": currentFocusLine + bulletPointsCount - 1,
      "offset": rootOffset
    };
    const frontmatter = this.convertJsonToFrontmatter(frontmatterJson);
    bulletPointsText = frontmatter + bulletPointsText;
    const isolatedFileAbstract = this.app.vault.getAbstractFileByPath(ISOLATION_FILE_PATH);
    if (isolatedFileAbstract)
      this.app.vault.delete(isolatedFileAbstract);
    const isolatedFile = await this.app.vault.create(ISOLATION_FILE_PATH, bulletPointsText);
    await this.app.workspace.getLeaf().openFile(isolatedFile);
  }
  async writeBackModifiedBulletPoint(evt) {
    var _a, _b, _c, _d, _e, _f, _g;
    const fileOrigin = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file;
    if (evt) {
      const bulletPointNr = this.getBulletPointNr(evt.target.parentNode);
      if (bulletPointNr === null) {
        this.showNotice("line in focus doesn't have bullet point", true);
        return;
      } else if (bulletPointNr !== 1) {
        this.showNotice("line in focus isn't root bullet point", true);
        return;
      }
    }
    let fm;
    await this.app.fileManager.processFrontMatter(fileOrigin, (frontmatter) => fm = frontmatter);
    if (fm) {
      const fmLength = Object.keys(fm).length + 2;
      const isolationFileLineCount = (_c = (_b = this.app.workspace.activeEditor) == null ? void 0 : _b.editor) == null ? void 0 : _c.lineCount();
      const isolatedFileAbstract = (_d = this.app.workspace.activeEditor) == null ? void 0 : _d.file;
      let linesToWrite = [];
      for (let lineNr = fmLength; lineNr < isolationFileLineCount; lineNr++) {
        linesToWrite.push((_f = (_e = this.app.workspace.activeEditor) == null ? void 0 : _e.editor) == null ? void 0 : _f.getLine(lineNr));
      }
      const linesToWriteCount = linesToWrite.length;
      needsWriteBackUnloadEvent = false;
      const originFileAbstract = this.app.vault.getAbstractFileByPath(fm.origin);
      console.log("Opening file in heree");
      await this.app.workspace.getLeaf().openFile(originFileAbstract);
      const currentEditor = (_g = this.app.workspace.activeEditor) == null ? void 0 : _g.editor;
      for (let lineNr = fm.startLine; lineNr < fm.endLine; lineNr++) {
        currentEditor == null ? void 0 : currentEditor.setLine(lineNr, "");
      }
      if (linesToWriteCount > fm.endLine - fm.startLine + 1) {
        const spacers = "\n".repeat(linesToWriteCount - (fm.endLine - fm.startLine + 1));
        currentEditor == null ? void 0 : currentEditor.setLine(fm.endLine, spacers);
      } else {
        currentEditor == null ? void 0 : currentEditor.setLine(fm.endLine, "");
      }
      for (let i = 0; i < linesToWriteCount; i++) {
        const lineToWrite = fm.startLine + i;
        currentEditor == null ? void 0 : currentEditor.setLine(lineToWrite, "	".repeat(fm.offset) + linesToWrite[i]);
      }
      await this.app.vault.delete(isolatedFileAbstract);
      needsWriteBackUnloadEvent = true;
    }
  }
  showNotice(msg, isFail = false) {
    new import_obsidian.Notice(isFail ? `BulletPointIsolation failed: ${msg}.` : msg);
  }
  getBulletPointNr(elem) {
    const match = elem.className.match(/HyperMD-list-line-(\d+)/);
    return match ? parseInt(match[1]) : null;
  }
  countBulletPointLines(elem) {
    let sibling = elem;
    const rootOffset = this.getBulletPointNr(sibling);
    let siblingCount = 1;
    while (sibling.nextSibling !== null) {
      sibling = sibling.nextSibling;
      const siblingOffset = this.getBulletPointNr(sibling);
      if (rootOffset >= siblingOffset)
        break;
      siblingCount++;
    }
    return siblingCount;
  }
  convertJsonToFrontmatter(obj, pendingNewline = true) {
    let frontmatterArr = Object.keys(obj).map((key) => `${key}: ${obj[key]}`);
    frontmatterArr.push("---");
    frontmatterArr.unshift("---");
    let frontmatterText = frontmatterArr.join("\n");
    return pendingNewline ? frontmatterText + "\n" : frontmatterText;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var BulletPointIsolatorModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var BulletPointIsolatorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
