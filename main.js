/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BulletPointIsolator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  isolationFilePath: "isolation.md"
};
var needsWriteBackUnloadEvent = true;
var lastOpenFilePath;
var BulletPointIsolator = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Settings", this.settings);
    const ribbonIconEl = this.addRibbonIcon("dice", "BulletPointIsolator Plugin", (evt) => {
      new import_obsidian.Notice("This is a notice i guess!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "bullet-point-isolator-write-back",
      name: "Write Back",
      editorCallback: async (editor, ctx) => {
        var _a;
        if (needsWriteBackUnloadEvent) {
          if (((_a = ctx.file) == null ? void 0 : _a.path) === this.settings.isolationFilePath) {
            new import_obsidian.Notice("Bullet Point Isolator: Isolation activated per command.");
            await this.writeBackModifiedBulletPoint(null, true);
          }
        }
      }
    });
    this.addSettingTab(new BulletPointIsolatorSettingTab(this.app, this));
    this.app.workspace.on("file-open", async (openedFile) => {
      if (!lastOpenFilePath)
        lastOpenFilePath = openedFile == null ? void 0 : openedFile.path;
      if (needsWriteBackUnloadEvent) {
        if (lastOpenFilePath === this.settings.isolationFilePath && (openedFile == null ? void 0 : openedFile.path) !== this.settings.isolationFilePath) {
          const isolationFile = this.app.vault.getFiles().find((file) => file.path === this.settings.isolationFilePath);
          if (isolationFile) {
            new import_obsidian.Notice("Bullet Point Isolator: Isolation activated automatically.");
            await this.writeBackModifiedBulletPoint(null, false);
          }
        }
      }
      lastOpenFilePath = openedFile == null ? void 0 : openedFile.path;
      needsWriteBackUnloadEvent = true;
    });
    this.registerDomEvent(document, "click", async (evt) => {
      var _a, _b;
      if (evt.altKey && evt.ctrlKey && this.getBulletPointNr(evt.target.parentNode)) {
        const fileOriginPath = (_b = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file) == null ? void 0 : _b.path;
        if (!fileOriginPath) {
          this.showFailNotice("File origin is either null or undefined.");
        } else {
          if (fileOriginPath === this.settings.isolationFilePath) {
            new import_obsidian.Notice("Bullet Point Isolator: Write back activated manually.");
            console.log("Bullet Point Isolator: Write back activated manually.");
            await this.writeBackModifiedBulletPoint(evt, true);
          } else {
            new import_obsidian.Notice("Bullet Point Isolator: Isolation activated manually.");
            console.log("Bullet Point Isolator: Isolation activated manually.");
            await this.isolateBulletPoint(evt);
          }
        }
      }
    });
  }
  async openFileWithoutEvent(file) {
    needsWriteBackUnloadEvent = false;
    await this.app.workspace.getLeaf().openFile(file);
    needsWriteBackUnloadEvent = true;
  }
  async isolateBulletPoint(evt) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const currentFocusLine = (_b = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor) == null ? void 0 : _b.getCursor().line;
    if (currentFocusLine === void 0 || currentFocusLine === null) {
      this.showFailNotice("No line in focus.");
      return;
    }
    const isBulletPoint = this.getBulletPointNr(evt.target.parentNode);
    if (isBulletPoint === null) {
      this.showFailNotice("Line in focus doesn't have bullet point.");
      return;
    }
    const bulletPointsCount = this.countBulletPointLines(evt.target.parentNode);
    let rootLine = (_d = (_c = this.app.workspace.activeEditor) == null ? void 0 : _c.editor) == null ? void 0 : _d.getLine(currentFocusLine);
    const rootOffset = rootLine == null ? void 0 : rootLine.match(/^\s*/)[0].length;
    if (rootOffset >= 1)
      rootLine = rootLine.substring(rootOffset);
    let linesToIsolate = [rootLine];
    for (let i = 1; i < bulletPointsCount; i++) {
      let lineToIsolate = (_f = (_e = this.app.workspace.activeEditor) == null ? void 0 : _e.editor) == null ? void 0 : _f.getLine(currentFocusLine + i);
      if (rootOffset >= 1) {
        lineToIsolate = lineToIsolate == null ? void 0 : lineToIsolate.substring(rootOffset);
      }
      linesToIsolate.push(lineToIsolate);
    }
    let bulletPointsText = linesToIsolate.join("\n");
    const frontmatterJson = {
      "origin": (_h = (_g = this.app.workspace.activeEditor) == null ? void 0 : _g.file) == null ? void 0 : _h.path,
      "startLine": currentFocusLine,
      "endLine": currentFocusLine + bulletPointsCount - 1,
      "offset": rootOffset
    };
    const frontmatter = this.convertJsonToFrontmatter(frontmatterJson);
    bulletPointsText = frontmatter + bulletPointsText;
    const isolatedFileAbstract = this.app.vault.getAbstractFileByPath(this.settings.isolationFilePath);
    if (isolatedFileAbstract)
      this.app.vault.delete(isolatedFileAbstract);
    const isolatedFile = await this.app.vault.create(this.settings.isolationFilePath, bulletPointsText);
    await this.app.workspace.getLeaf().openFile(isolatedFile);
  }
  async writeBackModifiedBulletPoint(evt, openOriginFileAfter) {
    if (evt) {
      const bulletPointNr = this.getBulletPointNr(evt.target.parentNode);
      if (bulletPointNr === null) {
        this.showFailNotice("Line in focus doesn't have bullet point.");
        return;
      } else if (bulletPointNr !== 1) {
        this.showFailNotice("Line in focus isn't root bullet point.");
        return;
      }
    }
    const isolationFile = this.app.vault.getFiles().find((file) => file.path === this.settings.isolationFilePath);
    if (!isolationFile) {
      this.showFailNotice("No isolation file.");
      return;
    }
    const isolationFileContent = await this.app.vault.read(isolationFile);
    let isolationFileFm;
    await this.app.fileManager.processFrontMatter(isolationFile, (frontmatter) => isolationFileFm = frontmatter).catch((_) => this.showFailNotice("Processing frontmatter."));
    if (!isolationFileFm) {
      this.showFailNotice("Couldn't process frontmatter.");
      return;
    }
    const frontmatterMatch = isolationFileContent.match(/^---\n([\s\S]*?)\n---\n/);
    if (!frontmatterMatch) {
      this.showFailNotice("No text to write back from the isolation file.");
      return;
    }
    const isolationFileText = isolationFileContent.replace(frontmatterMatch[0], "");
    const isolationFileLines = isolationFileText.split("\n");
    const offsetIsolationFileLines = isolationFileLines.map((line) => "	".repeat(isolationFileFm.offset) + line);
    const originFilePath = isolationFileFm.origin;
    const originFile = this.app.vault.getFiles().find((file) => file.path === originFilePath);
    if (!originFile) {
      this.showFailNotice("Origin file doesn't exist.");
    }
    const originFileContent = await this.app.vault.read(originFile);
    const originFileLines = originFileContent.split("\n");
    const originLinesToRemoveRange = isolationFileFm.endLine + 1 - isolationFileFm.startLine;
    originFileLines.splice(isolationFileFm.startLine, originLinesToRemoveRange, ...offsetIsolationFileLines);
    const modifiedOriginContent = originFileLines.join("\n");
    await this.app.vault.modify(originFile, modifiedOriginContent);
    if (openOriginFileAfter) {
      needsWriteBackUnloadEvent = false;
      await this.app.workspace.getLeaf().openFile(originFile);
    }
    await this.app.vault.delete(this.app.vault.getAbstractFileByPath(this.settings.isolationFilePath));
  }
  showFailNotice(msg) {
    new import_obsidian.Notice("BulletPointIsolation failed: " + msg);
  }
  getBulletPointNr(elem) {
    const match = elem.className.match(/HyperMD-list-line-(\d+)/);
    return match ? parseInt(match[1]) : null;
  }
  countBulletPointLines(elem) {
    let sibling = elem;
    const rootOffset = this.getBulletPointNr(sibling);
    let siblingCount = 1;
    while (sibling.nextSibling !== null) {
      sibling = sibling.nextSibling;
      const siblingOffset = this.getBulletPointNr(sibling);
      if (rootOffset >= siblingOffset)
        break;
      siblingCount++;
    }
    return siblingCount;
  }
  convertJsonToFrontmatter(obj, pendingNewline = true) {
    let frontmatterArr = Object.keys(obj).map((key) => `${key}: ${obj[key]}`);
    frontmatterArr.push("---");
    frontmatterArr.unshift("---");
    let frontmatterText = frontmatterArr.join("\n");
    return pendingNewline ? frontmatterText + "\n" : frontmatterText;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var BulletPointIsolatorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Bullet Point Isolator Plugin - Settings" });
    new import_obsidian.Setting(containerEl).setName("Isolation file path").setDesc("The path where the isolation file should be created.").addText((text) => text.setPlaceholder("The path here...").setValue(this.plugin.settings.isolationFilePath).onChange(async (value) => {
      this.plugin.settings.isolationFilePath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
