/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BulletPointIsolator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  isolationFileName: "isolation.md",
  isolationFileFolder: "/",
  isolationFilePath: "isolation.md"
};
var needsWriteBackUnloadEvent = true;
var lastOpenFilePath;
var BulletPointIsolator = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "BulletPointIsolator Plugin", (evt) => {
      new import_obsidian.Notice("Bullet Point Isolator.");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "bullet-point-isolator-isolate",
      name: "Isolate",
      editorCallback: async (editor, ctx) => {
        new import_obsidian.Notice("Bullet Point Isolator: Isolation activated per command.");
        await this.isolateBulletPoint();
      }
    });
    this.addCommand({
      id: "bullet-point-isolator-write-back",
      name: "Write Back",
      editorCallback: async (editor, ctx) => {
        var _a;
        if (needsWriteBackUnloadEvent) {
          if (((_a = ctx.file) == null ? void 0 : _a.path) === this.settings.isolationFilePath) {
            new import_obsidian.Notice("Bullet Point Isolator: Write Back activated per command.");
            await this.writeBackModifiedBulletPoint(null, true);
          }
        }
      }
    });
    this.addSettingTab(new BulletPointIsolatorSettingTab(this.app, this));
    this.app.workspace.on("file-open", async (openedFile) => {
      if (!lastOpenFilePath)
        lastOpenFilePath = openedFile == null ? void 0 : openedFile.path;
      if (needsWriteBackUnloadEvent) {
        if (lastOpenFilePath === this.settings.isolationFilePath && (openedFile == null ? void 0 : openedFile.path) !== this.settings.isolationFilePath) {
          const isolationFile = this.app.vault.getFiles().find((file) => file.path === this.settings.isolationFilePath);
          if (isolationFile) {
            new import_obsidian.Notice("Bullet Point Isolator: Isolation activated automatically.");
            await this.writeBackModifiedBulletPoint(null, false);
          }
        }
      }
      lastOpenFilePath = openedFile == null ? void 0 : openedFile.path;
      needsWriteBackUnloadEvent = true;
    });
    this.registerDomEvent(document, "click", async (evt) => {
      var _a, _b, _c;
      const currentEditor = this.app.workspace.activeEditor;
      const focusLine = (_a = currentEditor == null ? void 0 : currentEditor.editor) == null ? void 0 : _a.getCursor().line;
      const focusLineContent = (_b = currentEditor == null ? void 0 : currentEditor.editor) == null ? void 0 : _b.getLine(focusLine);
      if (evt.altKey && evt.ctrlKey && this.checkIsBulletPoint(focusLineContent)) {
        const fileOriginPath = (_c = currentEditor == null ? void 0 : currentEditor.file) == null ? void 0 : _c.path;
        if (!fileOriginPath) {
          this.showFailNotice("File origin is either null or undefined.");
        } else {
          if (fileOriginPath === this.settings.isolationFilePath) {
            new import_obsidian.Notice("Bullet Point Isolator: Write back activated manually.");
            await this.writeBackModifiedBulletPoint(evt, true);
          } else {
            new import_obsidian.Notice("Bullet Point Isolator: Isolation activated manually.");
            await this.isolateBulletPoint();
          }
        }
      }
    });
  }
  async openFileWithoutEvent(file) {
    needsWriteBackUnloadEvent = false;
    await this.app.workspace.getLeaf().openFile(file);
    needsWriteBackUnloadEvent = true;
  }
  // // Here I need to find out what element type we are dealing with and return it or null.
  // checkMdElement(text: string) {
  // }
  checkIsBulletPoint(text) {
    return text.trim().startsWith("- ");
  }
  extractBulletPoints(lines, startLine, normalized) {
    lines.splice(0, startLine);
    const firstLine = lines.shift();
    const firstOffset = firstLine == null ? void 0 : firstLine.match(/^\t*/)[0].length;
    let bullets = [firstLine];
    for (let lineNr in lines) {
      const lineOffset = lines[lineNr].match(/^\t*/)[0].length;
      const isBulletPoint = lines[lineNr].trim().startsWith("- ");
      if (!isBulletPoint || lineOffset <= firstOffset) {
        break;
      }
      bullets.push(lines[lineNr]);
    }
    return {
      "bullets": normalized ? bullets.map((b) => b.substring(firstOffset)) : bullets,
      "offset": firstOffset
    };
  }
  async isolateBulletPoint() {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const focusFilePath = (_b = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file) == null ? void 0 : _b.path;
    const focusLineNr = (_d = (_c = this.app.workspace.activeEditor) == null ? void 0 : _c.editor) == null ? void 0 : _d.getCursor().line;
    if (focusLineNr === void 0 || focusLineNr < 0) {
      this.showFailNotice("No line in focus.");
      return;
    }
    const focusLineContent = (_f = (_e = this.app.workspace.activeEditor) == null ? void 0 : _e.editor) == null ? void 0 : _f.getLine(focusLineNr);
    const isBulletPoint = this.checkIsBulletPoint(focusLineContent);
    if (!isBulletPoint) {
      this.showFailNotice("Not a supported MarkDown element.");
      return;
    }
    const focusFile = this.app.vault.getFiles().find((file) => file.path === focusFilePath);
    if (!focusFile) {
      this.showFailNotice("Focus file doesn't exist.");
      return;
    }
    const focusFileContent = await this.app.vault.read(focusFile);
    const focusFileLines = focusFileContent.split("\n");
    const extractedBulletPoints = this.extractBulletPoints(focusFileLines, focusLineNr, true);
    const frontmatterLines = [
      "---",
      `origin: ${(_h = (_g = this.app.workspace.activeEditor) == null ? void 0 : _g.file) == null ? void 0 : _h.path}`,
      `startLine: ${focusLineNr}`,
      `endLine: ${focusLineNr + extractedBulletPoints.bullets.length - 1}`,
      `offset: ${extractedBulletPoints.offset}`,
      "---"
    ];
    const contentToIsolate = [...frontmatterLines, ...extractedBulletPoints.bullets].join("\n");
    const isolatedFileAbstract = this.app.vault.getAbstractFileByPath(this.settings.isolationFilePath);
    if (isolatedFileAbstract)
      this.app.vault.delete(isolatedFileAbstract);
    const isolatedFile = await this.app.vault.create(this.settings.isolationFilePath, contentToIsolate);
    await this.app.workspace.getLeaf().openFile(isolatedFile);
  }
  async writeBackModifiedBulletPoint(evt, openOriginFileAfter) {
    var _a;
    if (evt) {
      const currentEditor = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor;
      const focusLine = currentEditor == null ? void 0 : currentEditor.getCursor().line;
      const focusLineContent = currentEditor == null ? void 0 : currentEditor.getLine(focusLine);
      const bulletPointNr = this.checkIsBulletPoint(focusLineContent);
      if (bulletPointNr === null) {
        this.showFailNotice("Line in focus doesn't have bullet point.");
        return;
      } else if (this.extractBulletPoints([focusLineContent], 0, true).offset !== 0) {
        this.showFailNotice("Line in focus isn't root bullet point.");
        return;
      }
    }
    const isolationFile = this.app.vault.getFiles().find((file) => file.path === this.settings.isolationFilePath);
    if (!isolationFile) {
      this.showFailNotice("No isolation file.");
      return;
    }
    const isolationFileContent = await this.app.vault.read(isolationFile);
    let isolationFileFm;
    await this.app.fileManager.processFrontMatter(isolationFile, (frontmatter) => isolationFileFm = frontmatter).catch((_) => this.showFailNotice("Processing frontmatter."));
    if (!isolationFileFm) {
      this.showFailNotice("Couldn't process frontmatter.");
      return;
    }
    const frontmatterMatch = isolationFileContent.match(/^---\n([\s\S]*?)\n---\n/);
    if (!frontmatterMatch) {
      this.showFailNotice("No text to write back from the isolation file.");
      return;
    }
    const isolationFileText = isolationFileContent.replace(frontmatterMatch[0], "");
    const isolationFileLines = isolationFileText.split("\n");
    const offsetIsolationFileLines = isolationFileLines.map((line) => "	".repeat(isolationFileFm.offset) + line);
    const originFilePath = isolationFileFm.origin;
    const originFile = this.app.vault.getFiles().find((file) => file.path === originFilePath);
    if (!originFile) {
      this.showFailNotice("Origin file doesn't exist.");
    }
    const originFileContent = await this.app.vault.read(originFile);
    const originFileLines = originFileContent.split("\n");
    const originLinesToRemoveRange = isolationFileFm.endLine + 1 - isolationFileFm.startLine;
    originFileLines.splice(isolationFileFm.startLine, originLinesToRemoveRange, ...offsetIsolationFileLines);
    const modifiedOriginContent = originFileLines.join("\n");
    await this.app.vault.modify(originFile, modifiedOriginContent);
    if (openOriginFileAfter) {
      needsWriteBackUnloadEvent = false;
      await this.app.workspace.getLeaf().openFile(originFile);
    }
    await this.app.vault.delete(this.app.vault.getAbstractFileByPath(this.settings.isolationFilePath));
  }
  showFailNotice(msg) {
    new import_obsidian.Notice("BulletPointIsolation failed: " + msg);
  }
  convertJsonToFrontmatter(obj, pendingNewline = true) {
    let frontmatterArr = Object.keys(obj).map((key) => `${key}: ${obj[key]}`);
    frontmatterArr.push("---");
    frontmatterArr.unshift("---");
    let frontmatterText = frontmatterArr.join("\n");
    return pendingNewline ? frontmatterText + "\n" : frontmatterText;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var BulletPointIsolatorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  updateIsolationFilePath() {
    this.plugin.settings.isolationFilePath = this.plugin.settings.isolationFileFolder === "/" ? this.plugin.settings.isolationFileName : this.plugin.settings.isolationFileFolder + this.plugin.settings.isolationFileName;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Bullet Point Isolator Plugin - Settings" });
    new import_obsidian.Setting(containerEl).setName("Isolation file name").setDesc("The name of the isolation file.").addText((text) => text.setPlaceholder("The name of the isolation file.").setValue(this.plugin.settings.isolationFileName).onChange(async (value) => {
      this.plugin.settings.isolationFileName = value;
      this.updateIsolationFilePath();
      console.log(this.plugin.settings);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Isolation file folder path").setDesc("The path where the isolation file should be created.").addDropdown((dropdown) => {
      const folders = this.app.vault.getFiles().map((file) => {
        var _a;
        return (_a = file.parent) == null ? void 0 : _a.path;
      }).unique();
      folders.forEach((folder) => dropdown.addOption(folder, folder));
      dropdown.setValue(this.plugin.settings.isolationFileFolder).onChange(async (value) => {
        this.plugin.settings.isolationFileFolder = value;
        this.updateIsolationFilePath();
        console.log(this.plugin.settings);
        await this.plugin.saveSettings();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
