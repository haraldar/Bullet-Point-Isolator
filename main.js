/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BulletPointIsolator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  isolationFilePath: "isolation.md"
};
var needsWriteBackUnloadEvent = true;
var lastOpenFilePath;
var BulletPointIsolator = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Settings", this.settings);
    const ribbonIconEl = this.addRibbonIcon("dice", "BulletPointIsolator Plugin", (evt) => {
      new import_obsidian.Notice("This is a notice i guess!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new BulletPointIsolatorModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "BulletPointIsolator editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("BulletPointIsolator Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new BulletPointIsolatorModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new BulletPointIsolatorSettingTab(this.app, this));
    this.app.workspace.on("file-open", async (openedFile) => {
      if (!lastOpenFilePath)
        lastOpenFilePath = openedFile == null ? void 0 : openedFile.path;
      console.log("Before", openedFile == null ? void 0 : openedFile.path);
      if (needsWriteBackUnloadEvent) {
        if (lastOpenFilePath === this.settings.isolationFilePath && (openedFile == null ? void 0 : openedFile.path) !== this.settings.isolationFilePath) {
          const isolationFile = this.app.vault.getFiles().find((file) => file.path === this.settings.isolationFilePath);
          if (isolationFile) {
            await this.app.workspace.getLeaf().openFile(isolationFile);
            await this.writeBackModifiedBulletPoint(null);
            await this.app.workspace.getLeaf().openFile(openedFile);
            console.log("After", openedFile == null ? void 0 : openedFile.path);
          }
        }
      }
      lastOpenFilePath = openedFile == null ? void 0 : openedFile.path;
    });
    this.registerDomEvent(document, "click", async (evt) => {
      var _a;
      if (evt.altKey && evt.ctrlKey && this.getBulletPointNr(evt.target.parentNode)) {
        const fileOriginPath = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file.path;
        if (fileOriginPath === null || fileOriginPath === void 0) {
          this.showNotice("file origin is either null or undefined", true);
        } else {
          this.showNotice("Bullet Point Isolator activated.");
          fileOriginPath === this.settings.isolationFilePath ? await this.writeBackModifiedBulletPoint(evt) : await this.isolateBulletPoint(evt);
        }
      }
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  async openFileWithoutEvent(file) {
    needsWriteBackUnloadEvent = false;
    await this.app.workspace.getLeaf().openFile(file);
    needsWriteBackUnloadEvent = true;
  }
  async isolateBulletPoint(evt) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const currentFocusLine = (_b = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor) == null ? void 0 : _b.getCursor().line;
    if (currentFocusLine === void 0 || currentFocusLine === null) {
      this.showNotice("no line in focus", true);
      return;
    }
    const isBulletPoint = this.getBulletPointNr(evt.target.parentNode);
    if (isBulletPoint === null) {
      this.showNotice("line in focus doesn't have bullet point", true);
      return;
    }
    const bulletPointsCount = this.countBulletPointLines(evt.target.parentNode);
    let rootLine = (_d = (_c = this.app.workspace.activeEditor) == null ? void 0 : _c.editor) == null ? void 0 : _d.getLine(currentFocusLine);
    const rootOffset = rootLine == null ? void 0 : rootLine.match(/^\s*/)[0].length;
    if (rootOffset >= 1)
      rootLine = rootLine.substring(rootOffset);
    let linesToIsolate = [rootLine];
    for (let i = 1; i < bulletPointsCount; i++) {
      let lineToIsolate = (_f = (_e = this.app.workspace.activeEditor) == null ? void 0 : _e.editor) == null ? void 0 : _f.getLine(currentFocusLine + i);
      if (rootOffset >= 1) {
        lineToIsolate = lineToIsolate == null ? void 0 : lineToIsolate.substring(rootOffset);
      }
      linesToIsolate.push(lineToIsolate);
    }
    let bulletPointsText = linesToIsolate.join("\n");
    const frontmatterJson = {
      "origin": (_h = (_g = this.app.workspace.activeEditor) == null ? void 0 : _g.file) == null ? void 0 : _h.path,
      "startLine": currentFocusLine,
      "endLine": currentFocusLine + bulletPointsCount - 1,
      "offset": rootOffset
    };
    const frontmatter = this.convertJsonToFrontmatter(frontmatterJson);
    bulletPointsText = frontmatter + bulletPointsText;
    const isolatedFileAbstract = this.app.vault.getAbstractFileByPath(this.settings.isolationFilePath);
    if (isolatedFileAbstract)
      this.app.vault.delete(isolatedFileAbstract);
    const isolatedFile = await this.app.vault.create(this.settings.isolationFilePath, bulletPointsText);
    await this.app.workspace.getLeaf().openFile(isolatedFile);
  }
  async writeBackModifiedBulletPoint(evt) {
    var _a, _b, _c, _d, _e, _f, _g;
    const fileOrigin = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.file;
    if (evt) {
      const bulletPointNr = this.getBulletPointNr(evt.target.parentNode);
      if (bulletPointNr === null) {
        this.showNotice("line in focus doesn't have bullet point", true);
        return;
      } else if (bulletPointNr !== 1) {
        this.showNotice("line in focus isn't root bullet point", true);
        return;
      }
    }
    let fm;
    await this.app.fileManager.processFrontMatter(fileOrigin, (frontmatter) => fm = frontmatter);
    if (fm) {
      const fmLength = Object.keys(fm).length + 2;
      const isolationFileLineCount = (_c = (_b = this.app.workspace.activeEditor) == null ? void 0 : _b.editor) == null ? void 0 : _c.lineCount();
      const isolatedFileAbstract = (_d = this.app.workspace.activeEditor) == null ? void 0 : _d.file;
      let linesToWrite = [];
      for (let lineNr = fmLength; lineNr < isolationFileLineCount; lineNr++) {
        linesToWrite.push((_f = (_e = this.app.workspace.activeEditor) == null ? void 0 : _e.editor) == null ? void 0 : _f.getLine(lineNr));
      }
      const linesToWriteCount = linesToWrite.length;
      needsWriteBackUnloadEvent = false;
      const originFileAbstract = this.app.vault.getAbstractFileByPath(fm.origin);
      await this.app.workspace.getLeaf().openFile(originFileAbstract);
      const currentEditor = (_g = this.app.workspace.activeEditor) == null ? void 0 : _g.editor;
      for (let lineNr = fm.startLine; lineNr < fm.endLine; lineNr++) {
        currentEditor == null ? void 0 : currentEditor.setLine(lineNr, "");
      }
      if (linesToWriteCount > fm.endLine - fm.startLine + 1) {
        const spacers = "\n".repeat(linesToWriteCount - (fm.endLine - fm.startLine + 1));
        currentEditor == null ? void 0 : currentEditor.setLine(fm.endLine, spacers);
      } else {
        currentEditor == null ? void 0 : currentEditor.setLine(fm.endLine, "");
      }
      for (let i = 0; i < linesToWriteCount; i++) {
        const lineToWrite = fm.startLine + i;
        currentEditor == null ? void 0 : currentEditor.setLine(lineToWrite, "	".repeat(fm.offset) + linesToWrite[i]);
      }
      await this.app.vault.delete(isolatedFileAbstract);
      needsWriteBackUnloadEvent = true;
    } else {
      this.showNotice("couldn't process frontmatter");
    }
  }
  showNotice(msg, isFail = false) {
    new import_obsidian.Notice(isFail ? `BulletPointIsolation failed: ${msg}.` : msg);
  }
  getBulletPointNr(elem) {
    const match = elem.className.match(/HyperMD-list-line-(\d+)/);
    return match ? parseInt(match[1]) : null;
  }
  countBulletPointLines(elem) {
    let sibling = elem;
    const rootOffset = this.getBulletPointNr(sibling);
    let siblingCount = 1;
    while (sibling.nextSibling !== null) {
      sibling = sibling.nextSibling;
      const siblingOffset = this.getBulletPointNr(sibling);
      if (rootOffset >= siblingOffset)
        break;
      siblingCount++;
    }
    return siblingCount;
  }
  convertJsonToFrontmatter(obj, pendingNewline = true) {
    let frontmatterArr = Object.keys(obj).map((key) => `${key}: ${obj[key]}`);
    frontmatterArr.push("---");
    frontmatterArr.unshift("---");
    let frontmatterText = frontmatterArr.join("\n");
    return pendingNewline ? frontmatterText + "\n" : frontmatterText;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var BulletPointIsolatorModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var BulletPointIsolatorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Bullet Point Isolator Plugin - Settings" });
    new import_obsidian.Setting(containerEl).setName("Isolation file path").setDesc("The path where the isolation file should be created.").addText((text) => text.setPlaceholder("The path here...").setValue(this.plugin.settings.isolationFilePath).onChange(async (value) => {
      this.plugin.settings.isolationFilePath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBFZGl0b3JQb3NpdGlvbiwgVGV4dEZpbGVWaWV3LCBURmlsZSwgVEFic3RyYWN0RmlsZSB9IGZyb20gJ29ic2lkaWFuJztcblxuXG4vLyBSZW1lbWJlciB0byByZW5hbWUgdGhlc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyFcblxuaW50ZXJmYWNlIEJ1bGxldFBvaW50SXNvbGF0b3JTZXR0aW5ncyB7XG5cdGlzb2xhdGlvbkZpbGVQYXRoOiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEJ1bGxldFBvaW50SXNvbGF0b3JTZXR0aW5ncyA9IHtcblx0aXNvbGF0aW9uRmlsZVBhdGg6IFwiaXNvbGF0aW9uLm1kXCJcbn1cblxubGV0IG5lZWRzV3JpdGVCYWNrVW5sb2FkRXZlbnQgPSB0cnVlO1xubGV0IGxhc3RPcGVuRmlsZVBhdGg7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1bGxldFBvaW50SXNvbGF0b3IgZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogQnVsbGV0UG9pbnRJc29sYXRvclNldHRpbmdzO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXHRcdGNvbnNvbGUubG9nKFwiU2V0dGluZ3NcIiwgdGhpcy5zZXR0aW5ncyk7XG5cblx0XHQvLyBUaGlzIGNyZWF0ZXMgYW4gaWNvbiBpbiB0aGUgbGVmdCByaWJib24uXG5cdFx0Y29uc3QgcmliYm9uSWNvbkVsID0gdGhpcy5hZGRSaWJib25JY29uKCdkaWNlJywgJ0J1bGxldFBvaW50SXNvbGF0b3IgUGx1Z2luJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0Ly8gQ2FsbGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBpY29uLlxuXHRcdFx0bmV3IE5vdGljZSgnVGhpcyBpcyBhIG5vdGljZSBpIGd1ZXNzIScpO1xuXHRcdH0pO1xuXHRcdC8vIFBlcmZvcm0gYWRkaXRpb25hbCB0aGluZ3Mgd2l0aCB0aGUgcmliYm9uXG5cdFx0cmliYm9uSWNvbkVsLmFkZENsYXNzKCdteS1wbHVnaW4tcmliYm9uLWNsYXNzJyk7XG5cblx0XHQvLyBUaGlzIGFkZHMgYSBzdGF0dXMgYmFyIGl0ZW0gdG8gdGhlIGJvdHRvbSBvZiB0aGUgYXBwLiBEb2VzIG5vdCB3b3JrIG9uIG1vYmlsZSBhcHBzLlxuXHRcdGNvbnN0IHN0YXR1c0Jhckl0ZW1FbCA9IHRoaXMuYWRkU3RhdHVzQmFySXRlbSgpO1xuXHRcdHN0YXR1c0Jhckl0ZW1FbC5zZXRUZXh0KCdTdGF0dXMgQmFyIFRleHQnKTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHNpbXBsZSBjb21tYW5kIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBhbnl3aGVyZVxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ29wZW4tc2FtcGxlLW1vZGFsLXNpbXBsZScsXG5cdFx0XHRuYW1lOiAnT3BlbiBzYW1wbGUgbW9kYWwgKHNpbXBsZSknLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHtcblx0XHRcdFx0bmV3IEJ1bGxldFBvaW50SXNvbGF0b3JNb2RhbCh0aGlzLmFwcCkub3BlbigpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdC8vIFRoaXMgYWRkcyBhbiBlZGl0b3IgY29tbWFuZCB0aGF0IGNhbiBwZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG9uIHRoZSBjdXJyZW50IGVkaXRvciBpbnN0YW5jZVxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ3NhbXBsZS1lZGl0b3ItY29tbWFuZCcsXG5cdFx0XHRuYW1lOiAnQnVsbGV0UG9pbnRJc29sYXRvciBlZGl0b3IgY29tbWFuZCcsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblx0XHRcdFx0Y29uc29sZS5sb2coZWRpdG9yLmdldFNlbGVjdGlvbigpKTtcblx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oJ0J1bGxldFBvaW50SXNvbGF0b3IgRWRpdG9yIENvbW1hbmQnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvLyBUaGlzIGFkZHMgYSBjb21wbGV4IGNvbW1hbmQgdGhhdCBjYW4gY2hlY2sgd2hldGhlciB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgYXBwIGFsbG93cyBleGVjdXRpb24gb2YgdGhlIGNvbW1hbmRcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdvcGVuLXNhbXBsZS1tb2RhbC1jb21wbGV4Jyxcblx0XHRcdG5hbWU6ICdPcGVuIHNhbXBsZSBtb2RhbCAoY29tcGxleCknLFxuXHRcdFx0Y2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XG5cdFx0XHRcdC8vIENvbmRpdGlvbnMgdG8gY2hlY2tcblx0XHRcdFx0Y29uc3QgbWFya2Rvd25WaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRcdFx0aWYgKG1hcmtkb3duVmlldykge1xuXHRcdFx0XHRcdC8vIElmIGNoZWNraW5nIGlzIHRydWUsIHdlJ3JlIHNpbXBseSBcImNoZWNraW5nXCIgaWYgdGhlIGNvbW1hbmQgY2FuIGJlIHJ1bi5cblx0XHRcdFx0XHQvLyBJZiBjaGVja2luZyBpcyBmYWxzZSwgdGhlbiB3ZSB3YW50IHRvIGFjdHVhbGx5IHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cblx0XHRcdFx0XHRpZiAoIWNoZWNraW5nKSB7XG5cdFx0XHRcdFx0XHRuZXcgQnVsbGV0UG9pbnRJc29sYXRvck1vZGFsKHRoaXMuYXBwKS5vcGVuKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gVGhpcyBjb21tYW5kIHdpbGwgb25seSBzaG93IHVwIGluIENvbW1hbmQgUGFsZXR0ZSB3aGVuIHRoZSBjaGVjayBmdW5jdGlvbiByZXR1cm5zIHRydWVcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IEJ1bGxldFBvaW50SXNvbGF0b3JTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cblx0XHQvLyBTZXQgdGhlIG9uIGZpbGUtb3BlbiBldmVudCB0aGF0IGNoZWNrcyBpZiB3ZSB3YW50IHRvIHdyaXRlIGJhY2sgdGhlIGJ1bGxldCBwb2ludC5cblx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJmaWxlLW9wZW5cIiwgYXN5bmMgKG9wZW5lZEZpbGUpID0+IHtcblxuXHRcdFx0Ly8gU2V0IHRoZSBsYXN0IG9wZW5lZCBmaWxlIHRvIHRoZSBjdXJyZW50IGZpbGUuXG5cdFx0XHRpZiAoIWxhc3RPcGVuRmlsZVBhdGgpXG5cdFx0XHRcdGxhc3RPcGVuRmlsZVBhdGggPSBvcGVuZWRGaWxlPy5wYXRoO1xuXHRcdFx0Y29uc29sZS5sb2coXCJCZWZvcmVcIiwgb3BlbmVkRmlsZT8ucGF0aCk7XG5cdFx0XHRcblx0XHRcdC8vIENoZWNrIGlmIHRoaXMgcGFydCBvZiB0aGUgZXZlbnQgaXMgY3VycmVudGx5IGJsb2NrZWQuXG5cdFx0XHRpZiAobmVlZHNXcml0ZUJhY2tVbmxvYWRFdmVudCkge1xuXG5cdFx0XHRcdC8vIENoZWNrcyB0aGF0IHdlIGp1c3Qgc3dpdGNoZWQgZnJvbSB0aGUgaXNvbGF0aW9uIGZpbGUgdG8gYW5vdGhlciBmaWxlLlxuXHRcdFx0XHRpZiAobGFzdE9wZW5GaWxlUGF0aCA9PT0gdGhpcy5zZXR0aW5ncy5pc29sYXRpb25GaWxlUGF0aCAmJiBvcGVuZWRGaWxlPy5wYXRoICE9PSB0aGlzLnNldHRpbmdzLmlzb2xhdGlvbkZpbGVQYXRoKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayB0aGF0IHRoZSBpc29sYXRpb24gZmlsZSBleGlzdHMuXG5cdFx0XHRcdFx0Y29uc3QgaXNvbGF0aW9uRmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEZpbGVzKCkuZmluZChmaWxlID0+IGZpbGUucGF0aCA9PT0gdGhpcy5zZXR0aW5ncy5pc29sYXRpb25GaWxlUGF0aCk7XG5cdFx0XHRcdFx0aWYgKGlzb2xhdGlvbkZpbGUpIHtcblxuXHRcdFx0XHRcdFx0Ly8gRmlyc3Qgb3BlbiB0aGUgaXNvbGF0aW9uIGZpbGUgaW4gdGhlIGVkaXRvciBhbmQgd3JpdGUgYmFjay5cblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCkub3BlbkZpbGUoaXNvbGF0aW9uRmlsZSk7XG5cdFx0XHRcdFx0XHQvLyBhd2FpdCB0aGlzLm9wZW5GaWxlV2l0aG91dEV2ZW50KGlzb2xhdGlvbkZpbGUpO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy53cml0ZUJhY2tNb2RpZmllZEJ1bGxldFBvaW50KG51bGwpO1xuXG5cdFx0XHRcdFx0XHQvLyBPcGVuIHRoZSBmaWxlIHN0YXJ0ZWQgZnJvbSBiYWNrIG9wZW4uXG5cdFx0XHRcdFx0XHQvLyBhd2FpdCB0aGlzLm9wZW5GaWxlV2l0aG91dEV2ZW50KG9wZW5lZEZpbGUpO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoKS5vcGVuRmlsZShvcGVuZWRGaWxlKTtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiQWZ0ZXJcIiwgb3BlbmVkRmlsZT8ucGF0aCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIG5ldyBsYXN0IG9wZW5lZCBmaWxlIHBhdGggdG8gdGhlIGN1cnJlbnRseSBvcGVuZWQgZmlsZS5cblx0XHRcdGxhc3RPcGVuRmlsZVBhdGggPSBvcGVuZWRGaWxlPy5wYXRoO1xuXHRcdH0pO1xuXG5cdFx0Ly8gUmVnaXN0ZXIgYSBET00gb25jbGljayBldmVudCBmb3IgaWYgaXNvbGF0ZSBvciB3cml0ZSBiYWNrIGEgYnVsbGV0IHBvaW50LlxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJywgYXN5bmMgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0aWYgKGV2dC5hbHRLZXkgJiYgZXZ0LmN0cmxLZXkgJiYgdGhpcy5nZXRCdWxsZXRQb2ludE5yKGV2dC50YXJnZXQucGFyZW50Tm9kZSkpIHtcblxuXHRcdFx0XHQvLyBHZXQgc29tZSBpbmZvcyBhYm91dCB0aGUgZmlsZSBpbiBmb2N1cy5cblx0XHRcdFx0Y29uc3QgZmlsZU9yaWdpblBhdGggPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlRWRpdG9yPy5maWxlLnBhdGg7XG5cblx0XHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIGZpbGUgaXMgZGVmaW5lZCBvciBub3QuXG5cdFx0XHRcdGlmIChmaWxlT3JpZ2luUGF0aCA9PT0gbnVsbCB8fCBmaWxlT3JpZ2luUGF0aCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0dGhpcy5zaG93Tm90aWNlKFwiZmlsZSBvcmlnaW4gaXMgZWl0aGVyIG51bGwgb3IgdW5kZWZpbmVkXCIsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy5zaG93Tm90aWNlKFwiQnVsbGV0IFBvaW50IElzb2xhdG9yIGFjdGl2YXRlZC5cIik7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBpZiB0aGUgZmlsZSBvcmlnaW4gaXMgYW55IGZpbGUgb3IgdGhlIGlzb2xhdGlvbiBmaWxlLlxuXHRcdFx0XHRcdGZpbGVPcmlnaW5QYXRoID09PSB0aGlzLnNldHRpbmdzLmlzb2xhdGlvbkZpbGVQYXRoXG5cdFx0XHRcdFx0XHQ/IGF3YWl0IHRoaXMud3JpdGVCYWNrTW9kaWZpZWRCdWxsZXRQb2ludChldnQpXG5cdFx0XHRcdFx0XHQ6IGF3YWl0IHRoaXMuaXNvbGF0ZUJ1bGxldFBvaW50KGV2dCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gV2hlbiByZWdpc3RlcmluZyBpbnRlcnZhbHMsIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNsZWFyIHRoZSBpbnRlcnZhbCB3aGVuIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQuXG5cdFx0dGhpcy5yZWdpc3RlckludGVydmFsKHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiBjb25zb2xlLmxvZygnc2V0SW50ZXJ2YWwnKSwgNSAqIDYwICogMTAwMCkpO1xuXHR9XG5cdFxuXG5cdGFzeW5jIG9wZW5GaWxlV2l0aG91dEV2ZW50KGZpbGU6IFRGaWxlIHwgVEFic3RyYWN0RmlsZSkge1xuXHRcdG5lZWRzV3JpdGVCYWNrVW5sb2FkRXZlbnQgPSBmYWxzZTtcblx0XHRhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKGZpbGUpO1xuXHRcdG5lZWRzV3JpdGVCYWNrVW5sb2FkRXZlbnQgPSB0cnVlO1xuXHR9XG5cblx0YXN5bmMgaXNvbGF0ZUJ1bGxldFBvaW50KGV2dDogTW91c2VFdmVudCkge1xuXG5cdFx0Y29uc3QgY3VycmVudEZvY3VzTGluZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3I/LmVkaXRvcj8uZ2V0Q3Vyc29yKCkubGluZTtcblxuXHRcdC8vIEEgc2VsZWN0ZWQgbGluZSBpcyByZXF1aXJlZC5cblx0XHRpZiAoY3VycmVudEZvY3VzTGluZSA9PT0gdW5kZWZpbmVkIHx8IGN1cnJlbnRGb2N1c0xpbmUgPT09IG51bGwpIHtcblx0XHRcdHRoaXMuc2hvd05vdGljZShcIm5vIGxpbmUgaW4gZm9jdXNcIiwgdHJ1ZSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHNlbGVjdGVkIGZpbGUgbXVzdCBjb250YWluIGEgYnVsbGV0IHBvaW50LlxuXHRcdGNvbnN0IGlzQnVsbGV0UG9pbnQgPSB0aGlzLmdldEJ1bGxldFBvaW50TnIoZXZ0LnRhcmdldC5wYXJlbnROb2RlKTtcblx0XHRpZiAoaXNCdWxsZXRQb2ludCA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5zaG93Tm90aWNlKFwibGluZSBpbiBmb2N1cyBkb2Vzbid0IGhhdmUgYnVsbGV0IHBvaW50XCIsIHRydWUpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHQvLyBHZXQgYWxsIHRoZSBidWxsZXQgYW5kIHN1YmJ1bGxldCBwb2ludHMuXG5cdFx0Y29uc3QgYnVsbGV0UG9pbnRzQ291bnQgPSB0aGlzLmNvdW50QnVsbGV0UG9pbnRMaW5lcyhldnQudGFyZ2V0LnBhcmVudE5vZGUpO1xuXG5cdFx0Ly8gR2V0IGN1cnJlbnQgYWN0aXZlIGxpbmUuXG5cdFx0bGV0IHJvb3RMaW5lID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZWRpdG9yPy5nZXRMaW5lKGN1cnJlbnRGb2N1c0xpbmUpO1xuXG5cdFx0Ly8gR2V0IHRoZSByb290IG9mZnNldCBhbmQgbm9ybWFsaXplIHRoZSBmaXJzdCBsaW5lLlxuXHRcdGNvbnN0IHJvb3RPZmZzZXQgPSByb290TGluZT8ubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoO1xuXHRcdGlmIChyb290T2Zmc2V0ID49IDEpXG5cdFx0XHRyb290TGluZSA9IHJvb3RMaW5lLnN1YnN0cmluZyhyb290T2Zmc2V0KTtcblxuXHRcdC8vIEl0ZXJhdGUgdGhyb3VnaCB0aGUgbGluZXMgYWZmZWN0ZWQgYnkgdGhlIGNsaWNrLlxuXHRcdGxldCBsaW5lc1RvSXNvbGF0ZSA9IFtyb290TGluZV07XG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPCBidWxsZXRQb2ludHNDb3VudDsgaSsrKSB7XG5cblx0XHRcdC8vIEdldCB0aGUgbGluZS5cblx0XHRcdGxldCBsaW5lVG9Jc29sYXRlID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZWRpdG9yPy5nZXRMaW5lKGN1cnJlbnRGb2N1c0xpbmUgKyBpKTtcblxuXHRcdFx0Ly8gTm9ybWFsaXplIHRoZSBsZWFkaW5nIHNwYWNlcyBhbmQgaWYgaXQgaXMgYSBzcGFjZSB0aGVuIHJlcGxhY2UgaXQgd2l0aCB0YWJzLlxuXHRcdFx0aWYgKHJvb3RPZmZzZXQgPj0gMSkge1xuXHRcdFx0XHRsaW5lVG9Jc29sYXRlID0gbGluZVRvSXNvbGF0ZT8uc3Vic3RyaW5nKHJvb3RPZmZzZXQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXNoIHRoZSBsaW5lIHRvIHRoZSBhcnJheS5cblx0XHRcdGxpbmVzVG9Jc29sYXRlLnB1c2gobGluZVRvSXNvbGF0ZSk7XG5cdFx0fVxuXG5cdFx0Ly8gSm9pbiB0aGUgbGluZXMgdG8gdXNlIHRoZW0gaW5zaWRlIHRoZSBjcmVhdGUgZnVuY3Rpb24gbGF0ZXIuXG5cdFx0bGV0IGJ1bGxldFBvaW50c1RleHQgPSBsaW5lc1RvSXNvbGF0ZS5qb2luKFwiXFxuXCIpO1xuXG5cdFx0Ly8gQWRkIHNvbWUgZnJvbnRtYXR0ZXIgdG8gdGhlIGJ1bGxldHBvaW50IHRvIGNvcHkuXG5cdFx0Y29uc3QgZnJvbnRtYXR0ZXJKc29uID0ge1xuXHRcdFx0XCJvcmlnaW5cIjogdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZmlsZT8ucGF0aCxcblx0XHRcdFwic3RhcnRMaW5lXCI6IGN1cnJlbnRGb2N1c0xpbmUsXG5cdFx0XHRcImVuZExpbmVcIjogY3VycmVudEZvY3VzTGluZSArIGJ1bGxldFBvaW50c0NvdW50IC0gMSxcblx0XHRcdFwib2Zmc2V0XCI6IHJvb3RPZmZzZXRcblx0XHR9XG5cdFx0Y29uc3QgZnJvbnRtYXR0ZXIgPSB0aGlzLmNvbnZlcnRKc29uVG9Gcm9udG1hdHRlcihmcm9udG1hdHRlckpzb24pO1xuXHRcdGJ1bGxldFBvaW50c1RleHQgPSBmcm9udG1hdHRlciArIGJ1bGxldFBvaW50c1RleHQ7XG5cblx0XHQvLyBDcmVhdGUgdGhlIHRlbXBvcmFyeSBmaWxlIGlmIGl0IGRvZXNudCBleGlzdCBvdGhlcndpc2UgZGVsZXRlIGl0IGZpcnN0LlxuXHRcdGNvbnN0IGlzb2xhdGVkRmlsZUFic3RyYWN0ID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHRoaXMuc2V0dGluZ3MuaXNvbGF0aW9uRmlsZVBhdGgpO1xuXHRcdGlmIChpc29sYXRlZEZpbGVBYnN0cmFjdClcblx0XHRcdHRoaXMuYXBwLnZhdWx0LmRlbGV0ZShpc29sYXRlZEZpbGVBYnN0cmFjdCk7XG5cblx0XHQvLyBXcml0ZSB0aGUgYnVsbGV0cyB0byB0aGUgdGVtcG9yYXJ5IGZpbGUuXG5cdFx0Y29uc3QgaXNvbGF0ZWRGaWxlID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlKHRoaXMuc2V0dGluZ3MuaXNvbGF0aW9uRmlsZVBhdGgsIGJ1bGxldFBvaW50c1RleHQpO1xuXG5cdFx0Ly8gQ3JlYXRlIG5ldyBsZWFmIGFuZCBvcGVuIGEgZmlsZSB0aGVyZS5cblx0XHRhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKGlzb2xhdGVkRmlsZSk7XG5cblx0fVxuXG5cdGFzeW5jIHdyaXRlQmFja01vZGlmaWVkQnVsbGV0UG9pbnQoZXZ0OiBNb3VzZUV2ZW50IHwgbnVsbCB8IHVuZGVmaW5lZCkge1xuXG5cdFx0Y29uc3QgZmlsZU9yaWdpbiA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3I/LmZpbGU7XG5cblx0XHQvLyBUaGUgc2VsZWN0ZWQgZmlsZSBtdXN0IGNvbnRhaW4gYSBidWxsZXQgcG9pbnQuXG5cdFx0aWYgKGV2dCkge1xuXHRcdFx0Y29uc3QgYnVsbGV0UG9pbnROciA9IHRoaXMuZ2V0QnVsbGV0UG9pbnROcihldnQudGFyZ2V0LnBhcmVudE5vZGUpO1xuXHRcdFx0aWYgKGJ1bGxldFBvaW50TnIgPT09IG51bGwpIHtcblx0XHRcdFx0dGhpcy5zaG93Tm90aWNlKFwibGluZSBpbiBmb2N1cyBkb2Vzbid0IGhhdmUgYnVsbGV0IHBvaW50XCIsIHRydWUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmICggYnVsbGV0UG9pbnROciAhPT0gMSkge1xuXHRcdFx0XHR0aGlzLnNob3dOb3RpY2UoXCJsaW5lIGluIGZvY3VzIGlzbid0IHJvb3QgYnVsbGV0IHBvaW50XCIsIHRydWUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJvY2VzcyB0aGUgZnJvbnRtYXR0ZXIsIHRoZW4gbW9kaWZ5IHRoZSBmaWxlcyB1c2luZyB0aG9zZSBhcyBpbnB1dC5cblx0XHRsZXQgZm07XG5cdFx0YXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGVPcmlnaW4sIChmcm9udG1hdHRlcikgPT4gZm0gPSBmcm9udG1hdHRlcik7XG5cdFx0aWYgKGZtKSB7XG5cblx0XHRcdC8vIEdldCB0aGUgYW1vdW50IG9mIGxpbmVzIHdlIG5lZWQgdG8gd3JpdGUuXG5cdFx0XHRjb25zdCBmbUxlbmd0aCA9IE9iamVjdC5rZXlzKGZtKS5sZW5ndGggKyAyO1xuXHRcdFx0Y29uc3QgaXNvbGF0aW9uRmlsZUxpbmVDb3VudCA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3I/LmVkaXRvcj8ubGluZUNvdW50KCk7XG5cdFx0XHRjb25zdCBpc29sYXRlZEZpbGVBYnN0cmFjdCA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3I/LmZpbGU7XG5cblx0XHRcdC8vIFJlYWQgdGhlIGxpbmVzIHRvIHRyYW5zZmVyLlxuXHRcdFx0bGV0IGxpbmVzVG9Xcml0ZSA9IFtdO1xuXHRcdFx0Zm9yIChsZXQgbGluZU5yID0gZm1MZW5ndGg7IGxpbmVOciA8IGlzb2xhdGlvbkZpbGVMaW5lQ291bnQ7IGxpbmVOcisrKSB7XG5cdFx0XHRcdGxpbmVzVG9Xcml0ZS5wdXNoKHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3I/LmVkaXRvcj8uZ2V0TGluZShsaW5lTnIpKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGxpbmVzVG9Xcml0ZUNvdW50ID0gbGluZXNUb1dyaXRlLmxlbmd0aDtcblxuXHRcdFx0Ly8gT3BlbiB0aGUgb3JpZ2luIGZpbGUgYW5kIGdldCB0aGUgZWRpdG9yLlxuXHRcdFx0bmVlZHNXcml0ZUJhY2tVbmxvYWRFdmVudCA9IGZhbHNlO1xuXHRcdFx0Y29uc3Qgb3JpZ2luRmlsZUFic3RyYWN0ID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZtLm9yaWdpbik7XG5cdFx0XHQvLyBhd2FpdCB0aGlzLm9wZW5GaWxlV2l0aG91dEV2ZW50KG9yaWdpbkZpbGVBYnN0cmFjdCk7XG5cdFx0XHRhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKG9yaWdpbkZpbGVBYnN0cmFjdCk7XG5cdFx0XHRjb25zdCBjdXJyZW50RWRpdG9yID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcj8uZWRpdG9yO1xuXG5cdFx0XHQvLyBGcmVlIHVwIHRoZSBzcGFjZSBpbiB0aGUgb3JpZ2luIGZpbGUuXG5cdFx0XHRmb3IgKGxldCBsaW5lTnIgPSBmbS5zdGFydExpbmU7IGxpbmVOciA8IGZtLmVuZExpbmU7IGxpbmVOcisrKSB7XG5cdFx0XHRcdGN1cnJlbnRFZGl0b3I/LnNldExpbmUobGluZU5yLCBcIlwiKTtcblx0XHRcdH1cblx0XHRcdC8vIFRPRE8gQ2hlY2sgd2hhdCBpZiBsZXNzIGxpbmVzLlxuXHRcdFx0aWYgKGxpbmVzVG9Xcml0ZUNvdW50ID4gKChmbS5lbmRMaW5lIC0gZm0uc3RhcnRMaW5lKSArIDEpKSB7XG5cdFx0XHRcdC8vIFNldCB0aGUgbGFzdCBsaW5lIHRvXG5cdFx0XHRcdGNvbnN0IHNwYWNlcnMgPSBcIlxcblwiLnJlcGVhdChsaW5lc1RvV3JpdGVDb3VudCAtICgoZm0uZW5kTGluZSAtIGZtLnN0YXJ0TGluZSkgKyAxKSk7XG5cdFx0XHRcdGN1cnJlbnRFZGl0b3I/LnNldExpbmUoZm0uZW5kTGluZSwgc3BhY2Vycyk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8gU2V0IHRoZSBsYXN0IGxpbmUgb2YgdGhlIHJhbmdlIHRvIHdyaXRlIHRvIGEgc2ltcGxlIHNwYWNlLlxuXHRcdFx0XHRjdXJyZW50RWRpdG9yPy5zZXRMaW5lKGZtLmVuZExpbmUsIFwiXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmFuc2ZlciB0aGUgbGluZXMgZnJvbSBpc29sYXRpb24gdG8gdGhlIG5ldyBwbGFjZS5cblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXNUb1dyaXRlQ291bnQ7IGkrKykge1xuXHRcdFx0XHRjb25zdCBsaW5lVG9Xcml0ZSA9IGZtLnN0YXJ0TGluZSArIGk7XG5cdFx0XHRcdGN1cnJlbnRFZGl0b3I/LnNldExpbmUobGluZVRvV3JpdGUsIFwiXFx0XCIucmVwZWF0KGZtLm9mZnNldCkgKyBsaW5lc1RvV3JpdGVbaV0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZWxldGUgdGhlIGlzb2xhdGlvbiBmaWxlLlxuXHRcdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQuZGVsZXRlKGlzb2xhdGVkRmlsZUFic3RyYWN0KTtcblxuXHRcdFx0bmVlZHNXcml0ZUJhY2tVbmxvYWRFdmVudCA9IHRydWU7XG5cblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHR0aGlzLnNob3dOb3RpY2UoXCJjb3VsZG4ndCBwcm9jZXNzIGZyb250bWF0dGVyXCIpXG5cdFx0fVxuXHR9XG5cblx0c2hvd05vdGljZShtc2csIGlzRmFpbDogYm9vbGVhbiA9IGZhbHNlKSB7XG5cdFx0bmV3IE5vdGljZShpc0ZhaWwgPyBgQnVsbGV0UG9pbnRJc29sYXRpb24gZmFpbGVkOiAke21zZ30uYCA6IG1zZyk7XG5cdH1cblxuXHRnZXRCdWxsZXRQb2ludE5yKGVsZW0pIHtcblx0XHRjb25zdCBtYXRjaCA9IGVsZW0uY2xhc3NOYW1lLm1hdGNoKC9IeXBlck1ELWxpc3QtbGluZS0oXFxkKykvKTtcblx0XHRyZXR1cm4gbWF0Y2ggPyBwYXJzZUludChtYXRjaFsxXSkgOiBudWxsO1xuXHR9XG5cblx0Y291bnRCdWxsZXRQb2ludExpbmVzKGVsZW0pIHtcblxuXHRcdC8vIFNldCB0aGUgcGFzc2VkIGVsZW1lbnQgYXMgaW5pdGlhbCBzaWJsaW5nIGFuZCBoZXQgaXRzIG9mZnNldCBudW1iZXIuXG5cdFx0bGV0IHNpYmxpbmcgPSBlbGVtO1xuXHRcdGNvbnN0IHJvb3RPZmZzZXQgPSB0aGlzLmdldEJ1bGxldFBvaW50TnIoc2libGluZyk7XG5cblx0XHRsZXQgc2libGluZ0NvdW50ID0gMTtcblx0XHR3aGlsZSAoc2libGluZy5uZXh0U2libGluZyAhPT0gbnVsbCkge1xuXG5cblx0XHRcdC8vIFNldCB0aGUgc2libGluZyBhcyBpdHMgbmV4dCBzaWJsaW5nLlxuXHRcdFx0c2libGluZyA9IHNpYmxpbmcubmV4dFNpYmxpbmc7XG5cblx0XHRcdC8vIElmIHRoZSBvZmZzZXQgbnVtYmVyIGlzIGVxdWFsIG9yIGxlc3MsIGJyZWFrIHRoZSBsb29wLlxuXHRcdFx0Y29uc3Qgc2libGluZ09mZnNldCA9IHRoaXMuZ2V0QnVsbGV0UG9pbnROcihzaWJsaW5nKTtcblx0XHRcdGlmIChyb290T2Zmc2V0ID49IHNpYmxpbmdPZmZzZXQpXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvLyBJbmNyZW1lbnQgdGhlIHNpYmxpbmdzIGNvdW50LlxuXHRcdFx0c2libGluZ0NvdW50Kys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNpYmxpbmdDb3VudDtcblx0fVxuXG5cdGNvbnZlcnRKc29uVG9Gcm9udG1hdHRlcihvYmosIHBlbmRpbmdOZXdsaW5lOiBib29sZWFuID0gdHJ1ZSkge1xuXHRcdGxldCBmcm9udG1hdHRlckFyciA9IE9iamVjdC5rZXlzKG9iaikubWFwKChrZXkpID0+IGAke2tleX06ICR7b2JqW2tleV19YCk7XG5cdFx0ZnJvbnRtYXR0ZXJBcnIucHVzaChcIi0tLVwiKTtcblx0XHRmcm9udG1hdHRlckFyci51bnNoaWZ0KFwiLS0tXCIpO1xuXHRcdGxldCBmcm9udG1hdHRlclRleHQgPSBmcm9udG1hdHRlckFyci5qb2luKFwiXFxuXCIpXG5cdFx0cmV0dXJuIHBlbmRpbmdOZXdsaW5lXG5cdFx0XHQ/IGZyb250bWF0dGVyVGV4dCArIFwiXFxuXCJcblx0XHRcdDogZnJvbnRtYXR0ZXJUZXh0O1xuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cblx0fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG59XG5cbmNsYXNzIEJ1bGxldFBvaW50SXNvbGF0b3JNb2RhbCBleHRlbmRzIE1vZGFsIHtcblx0Y29uc3RydWN0b3IoYXBwOiBBcHApIHtcblx0XHRzdXBlcihhcHApO1xuXHR9XG5cblx0b25PcGVuKCkge1xuXHRcdGNvbnN0IHtjb250ZW50RWx9ID0gdGhpcztcblx0XHRjb250ZW50RWwuc2V0VGV4dCgnV29haCEnKTtcblx0fVxuXG5cdG9uQ2xvc2UoKSB7XG5cdFx0Y29uc3Qge2NvbnRlbnRFbH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xuXHR9XG59XG5cbmNsYXNzIEJ1bGxldFBvaW50SXNvbGF0b3JTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogQnVsbGV0UG9pbnRJc29sYXRvcjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBCdWxsZXRQb2ludElzb2xhdG9yKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHt0ZXh0OiBcIkJ1bGxldCBQb2ludCBJc29sYXRvciBQbHVnaW4gLSBTZXR0aW5nc1wifSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKFwiSXNvbGF0aW9uIGZpbGUgcGF0aFwiKVxuXHRcdFx0LnNldERlc2MoXCJUaGUgcGF0aCB3aGVyZSB0aGUgaXNvbGF0aW9uIGZpbGUgc2hvdWxkIGJlIGNyZWF0ZWQuXCIpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiVGhlIHBhdGggaGVyZS4uLlwiKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaXNvbGF0aW9uRmlsZVBhdGgpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5pc29sYXRpb25GaWxlUGF0aCA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBZ0o7QUFTaEosSUFBTSxtQkFBZ0Q7QUFBQSxFQUNyRCxtQkFBbUI7QUFDcEI7QUFFQSxJQUFJLDRCQUE0QjtBQUNoQyxJQUFJO0FBRUosSUFBcUIsc0JBQXJCLGNBQWlELHVCQUFPO0FBQUEsRUFHdkQsTUFBTSxTQUFTO0FBQ2QsVUFBTSxLQUFLLGFBQWE7QUFDeEIsWUFBUSxJQUFJLFlBQVksS0FBSyxRQUFRO0FBR3JDLFVBQU0sZUFBZSxLQUFLLGNBQWMsUUFBUSw4QkFBOEIsQ0FBQyxRQUFvQjtBQUVsRyxVQUFJLHVCQUFPLDJCQUEyQjtBQUFB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
