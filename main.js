/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BulletPointIsolator
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var fs = require("fs");
var path = require("path");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var BulletPointIsolator = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "BulletPointIsolator Plugin", (evt) => {
      new import_obsidian.Notice("This is a notice i guess!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new BulletPointIsolatorModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "BulletPointIsolator editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("BulletPointIsolator Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new BulletPointIsolatorModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new BulletPointIsolatorSettingTab(this.app, this));
    this.registerDomEvent(document, "click", async (evt) => {
      await this.isolateBulletPoint(evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  async isolateBulletPoint(evt) {
    var _a, _b, _c, _d, _e, _f;
    if (evt.altKey && evt.ctrlKey && this.getBulletPointNr(evt.target.parentNode)) {
      console.log("Bullet Point Isolator activated with Ctrl+Alt+Click.");
      const bulletPointsCount = this.countBulletPointLines(evt.target.parentNode);
      const currentLine = (_b = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor) == null ? void 0 : _b.getCursor().line;
      let rootLine = (_d = (_c = this.app.workspace.activeEditor) == null ? void 0 : _c.editor) == null ? void 0 : _d.getLine(currentLine);
      const rootOffset = rootLine == null ? void 0 : rootLine.match(/^\s*/)[0].length;
      if (rootOffset >= 1)
        rootLine = rootLine.substring(rootOffset);
      let linesToIsolate = [rootLine];
      for (let i = 1; i < bulletPointsCount; i++) {
        let lineToIsolate = (_f = (_e = this.app.workspace.activeEditor) == null ? void 0 : _e.editor) == null ? void 0 : _f.getLine(currentLine + i);
        if (rootOffset >= 1) {
          lineToIsolate = lineToIsolate == null ? void 0 : lineToIsolate.substring(rootOffset);
        }
        linesToIsolate.push(lineToIsolate);
      }
      const bulletPointsText = linesToIsolate.join("\n");
      const isolatedFileName = "isolated.md";
      const isolatedFileAbstract = this.app.vault.getAbstractFileByPath(isolatedFileName);
      if (isolatedFileAbstract)
        this.app.vault.delete(isolatedFileAbstract);
      const isolatedFile = await this.app.vault.create(isolatedFileName, bulletPointsText);
      await this.app.workspace.getLeaf().openFile(isolatedFile);
    }
  }
  getBulletPointNr(elem) {
    const match = elem.className.match(/HyperMD-list-line-(\d+)/);
    return match ? parseInt(match[1]) : null;
  }
  countBulletPointLines(elem) {
    let sibling = elem;
    const rootOffset = this.getBulletPointNr(sibling);
    let siblingCount = 1;
    while (sibling.nextSibling !== null) {
      sibling = sibling.nextSibling;
      const siblingOffset = this.getBulletPointNr(sibling);
      if (rootOffset >= siblingOffset)
        break;
      siblingCount++;
    }
    return siblingCount;
  }
  // openFileWithObsidianProtocol(vaultName, filePath) {
  // 	const fileURI = encodeURI(`obsidian://open?vault=${vaultName}&file=${filePath}`);
  // 	window.open(fileURI);
  // }
  // offsetClassNameNr(className, offset = -1) {
  // 	return className
  // 		.replace(
  // 			/HyperMD-list-line-(\d+)/,
  // 			(match, lineNumber) => {
  // 				const newLineNumber = parseInt(lineNumber) + offset;
  // 				// return `HyperMD-list-line-1`;
  // 				return `HyperMD-list-line-${newLineNumber}`;
  // 			}
  // 		);
  // }
  // offsetBulletPoint(elem: HTMLElement, offset: number = -1) {
  // 	const indentNr = this.getBulletPointNr(elem);
  // 	// const bufferElement = elem.querySelector('.cm-widgetBuffer');
  // 	// if (bufferElement) {
  // 	//   const remainingElements = Array.from(bufferElement.nextElementSibling.children);
  // 	//   elem.replaceChildren(...remainingElements);
  // 	// }
  // 	console.log(elem);
  // 	console.log(elem.textContent?.trim());
  // 	// return className
  // 	// 	.replace(
  // 	// 		/HyperMD-list-line-(\d+)/,
  // 	// 		(match, lineNumber) => {
  // 	// 			const newLineNumber = parseInt(lineNumber) + offset;
  // 	// 			return `HyperMD-list-line-1`;
  // 	// 			// return `HyperMD-list-line-${newLineNumber}`;
  // 	// 		}
  // 	// 	);
  // }
  // // Returns a list of div elements that are
  // findAllBulletPoints(elem) {
  // 	// Set the passed element as initial sibling and het its offset number.
  // 	let sibling = elem;
  // 	const rootOffset = this.getBulletPointNr(sibling);
  // 	// Iterate through all the next siblings as long as a next one exists.
  // 	let siblings = [{
  // 		offset: rootOffset,
  // 		bullet: sibling.textContent.trim(),
  // 		element: sibling
  // 	}];
  // 	while (sibling.nextSibling !== null) {
  // 		// Set the sibling as its next sibling.
  // 		sibling = sibling.nextSibling;
  // 		// If the offset number is equal or less, break the loop.
  // 		const siblingOffset = this.getBulletPointNr(sibling);
  // 		if (rootOffset >= siblingOffset)
  // 			break;
  // 		// Replace the offset number in the class name of the element if the rootOffset is not already 1.
  // 		if (rootOffset > 1) {
  // 			const newClasses = this.offsetClassNameNr(sibling.className);
  // 			sibling.classList.remove(...sibling.classList);
  // 			newClasses.split(" ").forEach(c => sibling.classList.add(c));
  // 		}
  // 		siblings.push({
  // 			offset: siblingOffset,
  // 			bullet: sibling.textContent.trim(),
  // 			element: sibling
  // 		});
  // 	}
  // 	return {
  // 		offset: rootOffset,
  // 		originalFile: this.app.workspace.getActiveFile()?.path,
  // 		lineNr: this.app.workspace.activeEditor?.editor,
  // 		elements: siblings
  // 	}
  // }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var BulletPointIsolatorModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var BulletPointIsolatorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
